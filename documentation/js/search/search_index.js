var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.373,1,2.333]],["body/controllers/AppController.html",[0,2.148,1,3.649,2,1.688,3,0.27,4,0.235,5,0.235,6,3.607,7,0.381,8,1.302,9,5.314,10,1.396,11,0.024,12,4.249,13,5.407,14,4.249,15,0.546,16,4.249,17,1.023,18,2.148,19,0.588,20,0.789,21,3.649,22,2.615,23,1.312,24,3.367,25,3.607,26,4.249,27,0.27,28,0.136,29,2.615,30,2.068,31,2.405,32,2.615,33,1.583,34,4.249,35,0.018,36,0.018]],["title/modules/AppModule.html",[37,1.466,38,2.333]],["body/modules/AppModule.html",[1,3.334,2,1.68,3,0.188,4,0.164,5,0.164,11,0.024,19,0.664,20,0.549,24,3.36,25,2.51,27,0.188,28,0.094,35,0.014,36,0.014,37,1.794,38,4.527,39,1.439,40,2.059,41,2.51,42,2.51,43,2.51,44,3.653,45,3.36,46,3.36,47,3.36,48,2.395,49,1.674,50,1.674,51,2.957,52,2.604,53,2.604,54,2.957,55,2.51,56,2.216,57,2.957,58,1.996,59,1.439,60,2.51,61,2.059,62,2.216,63,2.51,64,2.51,65,2.059,66,2.216,67,1.794,68,2.216,69,2.855,70,2.957,71,4.231,72,1.674,73,2.957,74,2.957,75,1.92,76,2.957,77,0.265,78,2.957,79,2.957,80,2.957,81,2.957,82,2.957,83,2.957,84,2.957,85,2.957,86,2.957,87,2.957,88,2.957,89,1.82,90,2.957,91,2.957,92,2.957]],["title/injectables/AppService.html",[24,1.956,93,0.558]],["body/injectables/AppService.html",[3,0.3,4,0.261,5,0.261,7,0.423,8,1.391,9,5.517,11,0.024,15,0.607,17,1.137,18,2.293,19,0.467,20,0.876,24,3.268,27,0.3,28,0.151,33,1.758,35,0.02,36,0.02,93,0.932,94,1.65,95,4.006,96,4.72,97,4.72,98,4.72]],["title/injectables/AuditMiddleware.html",[93,0.558,99,2.333]],["body/injectables/AuditMiddleware.html",[3,0.259,4,0.226,5,0.226,7,0.366,8,1.268,11,0.024,15,0.524,17,0.982,19,0.521,20,0.757,27,0.259,28,0.13,32,2.51,35,0.018,36,0.018,77,0.366,93,0.85,94,1.426,99,3.554,100,3.461,101,3.241,102,3.554,103,2.966,104,3.936,105,3.794,106,3.794,107,4.16,108,4.078,109,1.113,110,0.982,111,1.113,112,2.752,113,2.135,114,3.554,115,1.85,116,1.984,117,5.266,118,4.078,119,4.078,120,4.078]],["title/controllers/AuthController.html",[0,1.373,121,2.333]],["body/controllers/AuthController.html",[0,1.596,2,1.596,3,0.255,4,0.222,5,0.222,7,0.36,8,1.256,10,1.32,11,0.024,15,0.517,17,0.968,19,0.606,20,0.746,22,2.473,23,1.241,27,0.255,28,0.128,29,2.473,33,1.497,35,0.018,36,0.018,77,0.36,109,1.097,110,0.968,111,1.097,121,3.52,122,3.411,123,2.712,124,4.018,125,2.456,126,4.428,127,4.018,128,3.773,129,5.217,130,4.018,131,1.514,132,2.274,133,2.712,134,1.955,135,3.279,136,3.411,137,3.411,138,3.411,139,4.018,140,4.018,141,4.018,142,2.104,143,4.018]],["title/classes/AuthLoginDto.html",[28,0.11,128,2.127]],["body/classes/AuthLoginDto.html",[3,0.288,4,0.25,5,0.25,7,0.406,10,1.487,11,0.024,15,0.582,19,0.557,23,1.398,27,0.288,28,0.18,35,0.019,36,0.019,75,2.553,77,0.406,128,3.463,131,1.777,144,2.371,145,4.776,146,3.843,147,1.738,148,1.634,149,4.527,150,4.527,151,2.553,152,4.216,153,2.371,154,3.055]],["title/modules/AuthModule.html",[37,1.466,44,2.127]],["body/modules/AuthModule.html",[2,1.801,3,0.207,4,0.18,5,0.18,8,0.786,11,0.024,15,0.419,17,0.786,19,0.634,20,0.605,27,0.207,28,0.104,32,2.007,35,0.015,36,0.015,37,1.923,39,1.587,40,2.206,44,3.944,48,2.566,49,1.846,50,1.846,52,2.79,53,2.79,55,3.848,56,2.444,77,0.292,109,0.89,110,0.786,111,0.89,113,1.708,116,1.587,121,3.517,125,1.383,135,3.468,136,2.769,155,2.769,156,2.769,157,3.771,158,3.262,159,2.444,160,3.397,161,4.22,162,3.262,163,2.444,164,3.397,165,2.444,166,3.262,167,3.262,168,2.444,169,4.534,170,2.201,171,3.262,172,4.534,173,2.201,174,3.262,175,3.262,176,3.262,177,3.262,178,2.769,179,3.262,180,3.262,181,3.262,182,2.007,183,3.262,184,3.262,185,2.201,186,2.444]],["title/injectables/AuthService.html",[93,0.558,135,1.956]],["body/injectables/AuthService.html",[3,0.237,4,0.207,5,0.207,7,0.335,8,1.197,11,0.024,15,0.639,17,0.899,19,0.589,20,0.693,27,0.237,28,0.119,30,1.817,33,1.391,35,0.017,36,0.017,72,2.114,77,0.446,93,0.803,94,1.306,103,2.535,109,1.357,110,1.197,111,1.357,125,2.37,126,4.219,128,3.667,131,1.084,135,2.814,137,3.17,138,3.17,168,2.798,182,2.298,187,3.17,188,3.059,189,3.734,190,6.512,191,3.734,192,4.971,193,3.734,194,2.114,195,2.603,196,2.52,197,3.355,198,1.483,199,3.17,200,3.17,201,3.734,202,3.734]],["title/injectables/BenchmarkInterceptor.html",[69,2.333,93,0.558]],["body/injectables/BenchmarkInterceptor.html",[3,0.208,4,0.181,5,0.181,7,0.293,8,1.094,11,0.024,15,0.42,17,0.788,19,0.558,20,0.607,27,0.208,28,0.104,33,1.218,35,0.015,36,0.015,69,3.066,77,0.293,93,0.734,94,1.144,101,2.013,103,2.688,105,3.212,106,3.471,109,0.893,110,0.788,111,0.893,115,1.484,116,1.592,185,3.522,198,2.073,203,2.777,204,4.543,205,4.543,206,5.926,207,5.926,208,3.271,209,3.271,210,5.22,211,4.543,212,2.777,213,4.543,214,3.271,215,3.271,216,3.271,217,3.271,218,3.271,219,4.543,220,3.271,221,3.271,222,3.271,223,3.271,224,2.451,225,3.271,226,2.777,227,3.271,228,3.271,229,4.543,230,3.271,231,4.543,232,3.271,233,3.271,234,3.271,235,5.22,236,3.271,237,5.22,238,3.271,239,4.543,240,3.271,241,3.271,242,3.271,243,3.271,244,3.271,245,4.543,246,4.543,247,4.543,248,3.271,249,3.271,250,3.271,251,3.271,252,3.271]],["title/entities/Comments.html",[67,1.466,253,1.81]],["body/entities/Comments.html",[3,0.177,4,0.154,5,0.154,7,0.25,10,2.021,11,0.024,15,0.791,18,1.61,19,0.519,23,0.86,27,0.177,28,0.089,35,0.014,36,0.014,61,2.553,65,2.921,67,1.719,77,0.552,89,1.715,110,0.671,131,1.387,134,2.712,147,1.252,148,1.786,151,2.529,253,1.459,254,2.365,255,1.779,256,3.579,257,2.94,258,3.431,259,2.167,260,3.579,261,4.055,262,2.786,263,3.579,264,2.786,265,2.365,266,4.053,267,2.786,268,3.037,269,2.786,270,2.786,271,2.365,272,4.053,273,3.44,274,2.365,275,2.786,276,2.495,277,2.365,278,2.786,279,2.786,280,2.786,281,4.358,282,3.44,283,3.44,284,3.44,285,3.44,286,3.037,287,1.459,288,2.786,289,2.786,290,2.786,291,1.715,292,3.579,293,2.704,294,3.037,295,1.88,296,2.365,297,2.365]],["title/controllers/CommentsController.html",[0,1.373,298,2.333]],["body/controllers/CommentsController.html",[0,0.962,2,0.962,3,0.154,4,0.134,5,0.134,7,0.217,8,0.88,10,1.445,11,0.024,15,0.565,17,1.059,19,0.584,20,0.449,21,3.306,22,1.49,23,0.748,27,0.154,28,0.077,29,1.49,30,1.178,31,3.128,33,1.824,35,0.012,36,0.012,67,1.865,75,1.657,77,0.439,109,1.2,110,1.059,111,1.2,123,1.634,125,2.612,131,1.06,132,1.37,133,2.968,134,2.14,142,2.565,148,1.665,194,2.772,195,2.753,198,0.962,258,2.248,298,2.465,299,2.055,300,3.67,301,4.462,302,3.733,303,2.421,304,3.401,305,4.298,306,1.814,307,2.055,308,2.421,309,2.558,310,2.055,311,2.055,312,2.421,313,2.421,314,2.421,315,2.565,316,2.421,317,2.421,318,2.421,319,2.055,320,4.158,321,1.814,322,1.814,323,3.1,324,2.055,325,2.303,326,2.055,327,1.37,328,1.814,329,1.814,330,1.098,331,1.37,332,2.465,333,2.055,334,2.055,335,2.421,336,1.814,337,2.421,338,3.67,339,2.055,340,2.421,341,2.421,342,2.421,343,1.814,344,3.653,345,2.421,346,2.055,347,2.055,348,2.421,349,3.1,350,2.055,351,2.055,352,1.634,353,2.248,354,2.055]],["title/modules/CommentsModule.html",[37,1.466,45,1.956]],["body/modules/CommentsModule.html",[2,1.812,3,0.209,4,0.182,5,0.182,8,0.793,11,0.024,15,0.423,17,0.793,19,0.635,20,0.611,27,0.209,28,0.105,32,2.025,35,0.015,36,0.015,37,1.935,39,1.601,40,2.22,45,3.691,46,2.582,47,3.478,48,2.582,49,1.863,50,1.863,52,2.808,53,2.808,58,2.221,59,1.601,60,2.793,64,2.793,67,1.935,68,2.466,77,0.295,109,0.898,110,0.793,111,0.898,113,1.723,116,1.601,159,2.466,160,3.418,161,4.236,163,2.466,164,3.418,165,2.466,185,2.221,186,2.466,298,3.534,325,3.523,326,2.793,355,2.793,356,2.793,357,3.291,358,2.793,359,3.291,360,3.418,361,3.291,362,3.079,363,3.291,364,2.221,365,3.291,366,3.291,367,3.291]],["title/injectables/CommentsService.html",[93,0.558,325,1.81]],["body/injectables/CommentsService.html",[3,0.086,4,0.075,5,0.075,7,0.122,8,0.554,11,0.024,15,0.613,17,1.093,19,0.547,20,0.253,27,0.086,28,0.043,30,1.119,33,1.777,35,0.008,36,0.008,59,0.662,67,1.49,68,1.019,72,0.77,75,1.594,77,0.428,93,0.371,94,0.476,103,2.165,109,1.302,110,1.149,111,1.302,115,0.617,125,2.6,131,1.237,132,0.77,134,2.209,142,2.769,148,1.747,182,0.837,188,1.416,194,2.909,195,2.837,196,0.918,197,2.371,198,2.365,255,0.507,258,2.417,259,1.594,287,0.712,293,1.988,295,0.918,302,1.952,304,2.162,309,2.501,315,1.84,324,1.155,325,1.204,330,1.594,331,0.77,332,2.371,333,1.155,334,1.155,353,1.839,362,0.918,368,1.155,369,2.3,370,2.3,371,2.3,372,2.3,373,2.988,374,2.3,375,1.723,376,1.36,377,2.232,378,2.536,379,2.057,380,2.988,381,2.371,382,1.36,383,2.3,384,2.536,385,3.401,386,1.36,387,2.3,388,1.36,389,2.3,390,1.36,391,2.3,392,1.36,393,1.36,394,1.36,395,2.3,396,1.36,397,1.952,398,1.36,399,1.416,400,1.019,401,1.952,402,1.019,403,1.36,404,1.36,405,0.77,406,0.837,407,1.36,408,1.155,409,1.36,410,1.019,411,1.155,412,1.723,413,1.155,414,1.019,415,1.155,416,2.238,417,2.238,418,2.238,419,1.36,420,1.019,421,2.3,422,1.36,423,1.952,424,1.36,425,1.36,426,1.36,427,1.36,428,1.36,429,1.36,430,1.155,431,2.536,432,1.155,433,1.36,434,1.155,435,1.155,436,1.155,437,1.36,438,1.36,439,2.412,440,2.232,441,1.36,442,2.3,443,2.536,444,1.36,445,1.36,446,1.36,447,1.019,448,1.155,449,1.36,450,1.155,451,1.36,452,1.36,453,1.019,454,3.618,455,1.155,456,2.016,457,2.016,458,1.155,459,2.238,460,2.016,461,2.3,462,1.952,463,1.36,464,1.36,465,1.723,466,1.155,467,1.155,468,1.155,469,1.155,470,1.155,471,1.155,472,3.927,473,3.513,474,0.918,475,1.019,476,2.3,477,1.019,478,1.155,479,1.36,480,1.155,481,1.155]],["title/classes/CreateCommentDto.html",[28,0.11,304,2.127]],["body/classes/CreateCommentDto.html",[3,0.274,4,0.239,5,0.239,7,0.387,10,1.794,11,0.024,15,0.702,18,2.169,19,0.54,23,1.333,27,0.274,28,0.174,35,0.018,36,0.018,77,0.49,144,2.26,147,1.686,148,1.585,151,2.718,152,4.488,153,2.26,255,2.231,258,3.687,304,3.361,482,3.663,483,4.316,484,4.316,485,4.316,486,4.316,487,4.635,488,4.091]],["title/injectables/CreateCommentMiddleware.html",[93,0.558,364,2.333]],["body/injectables/CreateCommentMiddleware.html",[3,0.243,4,0.212,5,0.212,7,0.343,8,1.216,11,0.024,15,0.492,17,0.921,19,0.5,20,0.71,27,0.243,28,0.122,35,0.017,36,0.017,77,0.343,93,0.815,94,1.337,101,3.108,102,3.408,103,2.729,104,3.816,105,3.702,106,3.702,107,4.059,109,1.044,110,0.921,111,1.044,112,2.581,113,2.003,114,3.408,115,1.735,116,1.861,154,2.581,198,1.519,255,1.881,258,3.48,309,1.861,364,3.408,399,2.354,439,2.165,440,2.003,489,3.246,490,3.824,491,2.865,492,2.865,493,3.246,494,3.246,495,3.246,496,3.246,497,2.581]],["title/classes/CreateLikeDto.html",[28,0.11,498,2.127]],["body/classes/CreateLikeDto.html",[3,0.263,4,0.229,5,0.229,7,0.371,10,1.93,11,0.024,15,0.755,19,0.526,23,1.278,27,0.263,28,0.17,35,0.018,36,0.018,77,0.527,144,2.167,147,1.642,148,1.543,151,2.813,152,3.983,153,2.167,352,3.964,474,3.964,498,3.272,499,3.513,500,4.138,501,4.138,502,3.815,503,5.317,504,4.138,505,4.138,506,5.874,507,5.874]],["title/classes/CreatePostDto.html",[28,0.11,508,2.127]],["body/classes/CreatePostDto.html",[3,0.292,4,0.255,5,0.255,7,0.413,10,1.512,11,0.024,15,0.592,18,2.258,19,0.562,23,1.421,27,0.292,28,0.182,35,0.019,36,0.019,77,0.413,144,2.41,147,1.755,151,2.579,153,2.41,255,2.298,488,4.259,508,3.499,509,4.825,510,3.448,511,3.906,512,3.906]],["title/injectables/CreatePostMiddleware.html",[93,0.558,513,2.333]],["body/injectables/CreatePostMiddleware.html",[3,0.247,4,0.215,5,0.215,7,0.349,8,1.23,11,0.024,15,0.5,17,0.937,19,0.505,20,0.722,27,0.247,28,0.124,35,0.017,36,0.017,77,0.349,93,0.825,94,1.361,101,3.144,102,3.447,103,2.747,104,3.849,105,3.727,106,3.727,107,4.086,109,1.062,110,0.937,111,1.062,112,2.626,113,2.038,114,3.447,115,1.766,116,1.894,134,1.894,154,2.626,198,1.545,255,1.903,399,2.395,439,2.203,440,2.038,491,2.916,492,2.916,493,3.303,494,3.303,495,3.303,496,3.303,497,2.626,513,3.447,514,3.303,515,3.891]],["title/injectables/JwtAuthGuard.html",[93,0.558,327,1.956]],["body/injectables/JwtAuthGuard.html",[3,0.315,4,0.274,5,0.274,11,0.023,19,0.588,20,0.919,27,0.315,28,0.158,35,0.02,36,0.02,93,0.96,94,1.732,170,3.342,291,3.048,327,3.364,516,4.203,517,4.203,518,4.952,519,4.952]],["title/injectables/JwtStrategy.html",[93,0.558,157,2.127]],["body/injectables/JwtStrategy.html",[3,0.257,4,0.224,5,0.224,7,0.363,8,1.262,11,0.024,15,0.674,17,0.975,19,0.575,20,0.751,27,0.257,28,0.129,33,1.508,35,0.018,36,0.018,77,0.363,93,0.846,94,1.415,109,1.105,110,0.975,111,1.105,125,2.465,131,1.175,132,2.291,157,3.226,170,2.732,178,3.436,188,3.577,199,3.436,291,2.491,293,2.291,520,3.436,521,5.241,522,4.048,523,5.241,524,4.048,525,4.048,526,4.048,527,3.436,528,3.436,529,4.048,530,4.048,531,4.048,532,4.048,533,4.048,534,4.048,535,4.048,536,4.048]],["title/entities/Likes.html",[65,1.682,253,1.81]],["body/entities/Likes.html",[3,0.199,4,0.173,5,0.173,7,0.281,10,1.987,11,0.024,15,0.778,19,0.504,23,0.967,27,0.199,28,0.1,35,0.015,36,0.015,65,2.145,67,2.347,75,2,77,0.542,89,1.928,110,0.755,131,1.48,147,1.361,148,1.756,151,2.646,253,1.64,259,2.314,260,3.302,261,3.741,263,3.821,268,3.302,271,2.659,273,3.741,274,2.659,281,4.369,283,3.741,284,3.741,286,3.302,287,1.64,291,1.928,292,3.302,293,2.495,294,3.302,296,2.659,309,2.838,352,3.936,502,3.406,537,2.659,538,4.329,539,4.329,540,4.408,541,3.133,542,3.741,543,3.133,544,3.133,545,3.133,546,3.133,547,3.133,548,2.659,549,3.133]],["title/controllers/LikesController.html",[0,1.373,550,2.333]],["body/controllers/LikesController.html",[0,1.439,2,1.439,3,0.23,4,0.2,5,0.2,7,0.325,8,1.174,10,1.191,11,0.024,15,0.466,17,0.873,19,0.626,20,0.673,21,3.288,22,2.231,23,1.119,27,0.23,28,0.116,29,2.231,30,1.764,31,2.758,33,1.35,35,0.016,36,0.016,65,1.764,77,0.437,109,0.989,110,0.873,111,0.989,123,2.446,125,2.334,133,2.446,134,2.371,142,1.898,195,2.552,198,1.439,300,3.651,305,3.651,306,2.715,307,3.076,309,1.764,321,2.715,322,2.715,327,2.051,328,2.715,329,2.715,330,1.644,331,2.051,336,2.715,338,2.715,343,2.715,378,3.076,379,2.552,498,3.893,550,3.288,551,3.076,552,3.624,553,3.624,554,3.076,555,3.076,556,3.624,557,3.624,558,4.873,559,3.624]],["title/modules/LikesModule.html",[37,1.466,46,1.956]],["body/modules/LikesModule.html",[2,2.029,3,0.247,4,0.215,5,0.215,11,0.024,19,0.638,20,0.722,27,0.247,28,0.124,35,0.017,36,0.017,37,2.166,39,1.894,40,2.486,45,2.891,46,3.723,48,2.891,49,2.203,50,2.203,52,3.144,53,2.395,58,2.626,59,1.894,63,3.303,65,1.894,66,2.916,360,3.827,362,3.447,379,3.618,550,3.849,555,3.303,560,3.303,561,3.303,562,3.303,563,3.891,564,3.891,565,3.891]],["title/injectables/LikesService.html",[93,0.558,379,1.81]],["body/injectables/LikesService.html",[3,0.082,4,0.072,5,0.072,7,0.116,8,0.532,11,0.024,15,0.627,17,1.126,19,0.514,20,0.241,27,0.082,28,0.041,30,1.076,33,1.937,35,0.007,36,0.007,59,0.632,65,0.632,66,0.973,67,1.445,72,0.735,75,2.29,77,0.419,93,0.357,94,0.454,103,2.12,109,1.33,110,1.174,111,1.33,115,0.589,125,2.634,131,1.109,132,1.634,142,3.117,148,1.709,182,0.799,188,1.36,194,1.634,195,2.643,196,0.876,197,1.948,198,2.065,200,1.102,259,1.887,287,0.68,293,2.759,295,2.579,309,2.274,325,2.324,330,0.589,331,0.735,332,2.3,352,3.679,353,1.777,354,1.102,362,0.876,375,1.656,379,1.158,381,2.3,384,2.45,385,2.553,400,0.973,402,0.973,405,0.735,408,1.102,416,1.656,417,1.656,418,2.163,420,0.973,439,1.251,440,1.158,443,1.102,447,0.973,453,0.973,456,1.948,457,1.948,459,1.656,460,1.948,465,1.656,474,1.492,475,0.973,477,0.973,478,1.102,497,0.876,498,2.097,538,3.53,539,3.767,554,1.102,566,1.102,567,2.211,568,2.211,569,2.211,570,2.211,571,2.211,572,2.887,573,2.211,574,1.298,575,2.887,576,1.298,577,2.211,578,1.298,579,2.211,580,1.298,581,2.211,582,1.298,583,2.211,584,1.298,585,2.211,586,1.298,587,1.298,588,4.438,589,1.298,590,2.211,591,1.298,592,2.211,593,1.298,594,1.298,595,1.298,596,1.298,597,1.298,598,1.298,599,2.887,600,1.298,601,3.408,602,3.408,603,1.298,604,1.298,605,1.298,606,1.298,607,3.822,608,1.298,609,2.887,610,2.211,611,2.211,612,1.298,613,3.408,614,1.298,615,3.408,616,3.408,617,1.298,618,2.887,619,2.211,620,2.211,621,1.298,622,2.211,623,1.298,624,1.298,625,1.102,626,2.211,627,2.211,628,2.211,629,1.102,630,1.298,631,2.887,632,2.211,633,1.298,634,1.298,635,2.211,636,1.656,637,1.298,638,1.298]],["title/classes/PagingDto.html",[28,0.11,315,1.81]],["body/classes/PagingDto.html",[3,0.264,4,0.23,5,0.23,7,0.372,10,1.933,11,0.024,15,0.756,19,0.527,23,1.283,27,0.264,28,0.17,35,0.018,36,0.018,77,0.528,144,2.175,147,1.646,148,1.907,151,2.817,153,2.175,315,2.791,410,4.409,412,4.409,414,4.409,487,5.269,639,3.526,640,5.885,641,4.154,642,4.154,643,4.154]],["title/controllers/PostController.html",[0,1.373,644,2.333]],["body/controllers/PostController.html",[0,0.921,2,0.921,3,0.147,4,0.128,5,0.128,7,0.208,8,0.852,10,1.574,11,0.024,15,0.616,17,1.154,19,0.591,20,0.431,21,3.234,22,1.428,23,0.716,27,0.147,28,0.074,29,1.428,30,1.129,31,3.2,33,1.785,35,0.012,36,0.012,61,1.721,75,1.604,77,0.487,109,1.308,110,1.154,111,1.308,123,1.566,125,2.663,131,1.498,133,2.386,134,2.964,142,2.51,148,1.578,194,2.001,195,3.052,198,0.921,300,3.591,301,4.379,305,3.21,306,2.649,310,1.969,311,1.969,315,2.51,319,1.969,320,3.637,321,1.738,322,1.738,323,3.001,327,1.313,328,1.738,329,1.738,330,1.052,331,1.313,336,3.21,338,3.21,339,1.969,343,1.738,346,1.969,347,1.969,349,4.379,350,1.969,351,1.969,377,2.244,508,3.346,644,2.386,645,1.969,646,3.536,647,2.32,648,4.285,649,2.32,650,2.32,651,2.32,652,2.32,653,2.32,654,2.32,655,2.32,656,2.32,657,2.32,658,3.346,659,2.32,660,2.32,661,2.32,662,3.536,663,1.969,664,3.001,665,1.969,666,1.969,667,1.969,668,1.566,669,2.32,670,2.32,671,2.32,672,2.32,673,2.32,674,2.32,675,3.536,676,2.32,677,2.32,678,2.32]],["title/modules/PostModule.html",[37,1.466,47,1.956]],["body/modules/PostModule.html",[2,1.862,3,0.217,4,0.189,5,0.189,8,0.824,11,0.024,15,0.44,17,0.824,19,0.63,20,0.635,27,0.217,28,0.109,32,2.885,35,0.016,36,0.016,37,1.988,39,1.666,40,2.281,47,3.604,48,2.653,49,1.937,50,1.937,52,2.885,53,2.107,58,2.31,59,1.666,61,2.281,62,2.565,77,0.307,99,2.31,109,0.934,110,0.824,111,0.934,113,1.792,116,1.666,159,2.565,160,3.512,161,4.307,163,3.512,164,3.512,165,2.565,185,3.163,186,3.512,360,3.512,377,3.546,513,2.31,644,3.607,665,2.905,679,2.905,680,2.905,681,2.905,682,3.423,683,3.423,684,3.423,685,3.423,686,3.423,687,3.423,688,3.423,689,3.423,690,3.423,691,3.423]],["title/injectables/PostService.html",[93,0.558,377,1.81]],["body/injectables/PostService.html",[3,0.101,4,0.088,5,0.088,7,0.142,8,0.63,11,0.024,15,0.654,17,1.173,19,0.537,20,0.294,27,0.101,28,0.051,30,1.272,33,1.814,35,0.009,36,0.009,59,0.772,61,0.772,62,1.188,72,0.898,75,1.755,77,0.456,93,0.422,94,0.555,103,2.309,109,1.389,110,1.226,111,1.389,115,0.72,125,2.682,131,1.531,132,0.898,134,2.241,142,2.665,148,1.732,182,0.976,188,1.609,194,0.898,195,2.978,196,1.07,197,1.764,198,2.37,255,0.974,259,1.941,287,0.831,293,1.888,309,0.772,315,2.026,330,1.755,331,0.898,353,2.053,375,1.959,377,1.369,381,2.611,385,2.898,397,2.219,399,1.609,400,1.959,401,3.284,402,1.188,410,1.188,411,1.346,412,1.959,413,1.346,414,1.188,415,1.346,416,2.499,417,2.499,418,2.499,420,2.499,423,1.346,430,1.346,431,1.346,432,1.346,434,1.346,435,1.346,436,1.346,439,2.422,440,2.241,447,1.959,448,1.346,450,1.346,453,1.959,454,3.908,455,1.346,456,2.251,457,2.251,458,1.346,459,2.499,460,2.251,462,2.219,465,1.959,466,1.346,467,1.346,468,1.346,469,1.346,470,1.346,471,1.346,480,1.346,481,1.346,508,2.381,625,1.346,629,1.346,658,2.381,663,1.346,664,2.219,666,1.346,667,1.346,692,1.346,693,2.615,694,2.615,695,2.615,696,2.615,697,2.615,698,2.615,699,1.586,700,1.586,701,2.615,702,2.615,703,1.586,704,2.615,705,1.586,706,2.615,707,1.586,708,2.615,709,1.586,710,2.615,711,1.586,712,2.615,713,3.335,714,1.586,715,1.586,716,2.615,717,1.586,718,1.586,719,3.335,720,1.586,721,1.586,722,1.586,723,1.586,724,1.586,725,1.586,726,1.586,727,1.586,728,2.615,729,1.586,730,1.586,731,1.586,732,1.586,733,1.586,734,1.586,735,1.586,736,2.615]],["title/entities/Posts.html",[61,1.682,253,1.81]],["body/entities/Posts.html",[3,0.217,4,0.189,5,0.189,7,0.306,10,1.976,11,0.024,15,0.773,18,1.858,19,0.528,23,1.054,27,0.217,28,0.109,35,0.016,36,0.016,61,2.276,67,2.698,75,2.122,77,0.539,89,2.1,131,1.549,147,1.444,148,1.667,151,2.421,253,1.787,255,1.988,257,3.285,259,2.421,260,3.504,263,3.999,265,2.896,268,2.557,276,2.879,277,2.896,281,4.302,282,3.97,285,3.97,286,3.504,287,1.787,291,2.1,292,3.504,294,2.557,297,2.896,309,2.276,542,3.97,548,2.896,737,2.896,738,4.677,739,3.412,740,3.412,741,3.412,742,3.412,743,3.412,744,3.412]],["title/interfaces/ReqResponse.html",[330,1.568,745,1.568]],["body/interfaces/ReqResponse.html",[3,0.275,4,0.24,5,0.24,7,0.388,11,0.024,18,2.637,27,0.275,35,0.019,36,0.019,77,0.565,147,1.69,148,1.742,330,2.484,353,3.88,456,4.255,457,4.255,460,4.255,502,4.087,745,1.966,746,2.666,747,3.677]],["title/classes/UpdatePostDto.html",[28,0.11,658,2.127]],["body/classes/UpdatePostDto.html",[3,0.292,4,0.255,5,0.255,7,0.413,10,1.512,11,0.024,15,0.592,18,2.258,19,0.562,23,1.421,27,0.292,28,0.182,35,0.019,36,0.019,77,0.413,144,2.41,147,1.755,151,2.579,153,2.41,255,2.298,488,4.259,510,3.448,511,3.906,512,3.906,658,3.499,748,4.825]],["title/injectables/ValidUserMiddleware.html",[93,0.558,173,2.333]],["body/injectables/ValidUserMiddleware.html",[3,0.249,4,0.217,5,0.217,7,0.351,8,1.236,11,0.024,15,0.504,17,0.944,19,0.508,20,0.727,27,0.249,28,0.125,35,0.017,36,0.017,77,0.351,93,0.829,94,1.37,101,3.159,102,3.463,103,2.755,104,3.862,105,3.737,106,3.737,107,4.098,109,1.069,110,0.944,111,1.069,112,2.645,113,2.052,114,3.463,115,1.778,116,1.907,131,1.49,154,2.645,173,3.463,198,1.556,399,2.412,439,2.218,440,2.052,491,2.936,492,3.845,497,2.645,749,3.326,750,3.919,751,3.919,752,3.919]],["title/coverage.html",[753,3.535]],["body/coverage.html",[0,2.211,1,1.876,5,0.154,6,2.359,11,0.024,24,1.573,28,0.186,35,0.014,36,0.014,61,1.352,65,1.352,67,1.179,69,1.876,77,0.249,93,1.053,95,2.359,99,1.876,100,2.359,121,1.876,122,2.359,128,1.711,135,1.573,145,2.359,146,2.359,157,1.711,173,1.876,187,2.359,203,2.359,253,2.498,254,2.359,295,4.759,298,1.876,299,2.359,304,1.711,315,1.455,325,1.455,327,1.573,330,1.261,364,1.876,368,2.359,377,1.455,379,1.455,405,1.573,406,1.711,440,1.455,482,2.359,489,2.359,498,1.711,499,2.359,508,1.711,509,2.359,510,3.031,513,1.876,514,2.359,516,2.359,517,2.359,520,2.359,537,2.359,550,1.876,551,2.359,566,2.359,639,2.359,644,1.876,645,2.359,658,1.711,668,1.876,692,2.359,737,2.359,745,2.377,747,2.359,748,2.359,749,2.359,753,2.082,754,2.779,755,2.779,756,2.779,757,6.523,758,4.77,759,5.568,760,4.77,761,4.046,762,3.031,763,2.779,764,2.779,765,2.779,766,2.359,767,2.779,768,2.359,769,2.359,770,4.77,771,2.779,772,2.779]],["title/dependencies.html",[40,2.023,773,2.449]],["body/dependencies.html",[11,0.024,20,0.757,23,1.259,28,0.168,35,0.018,36,0.018,40,1.984,56,3.055,59,1.984,72,2.308,115,2.389,153,2.135,168,3.055,170,2.752,212,3.461,287,2.135,527,4.951,528,3.461,774,6.165,775,4.078,776,4.078,777,4.078,778,4.078,779,4.078,780,4.078,781,4.078,782,4.078,783,4.078,784,4.078,785,4.078,786,4.078,787,4.078,788,4.078,789,4.078,790,4.078,791,4.078,792,4.078,793,4.078,794,4.078,795,4.078,796,4.078,797,4.078,798,4.078,799,4.078,800,4.078,801,4.078,802,4.078]],["title/miscellaneous/enumerations.html",[803,1.947,804,3.529]],["body/miscellaneous/enumerations.html",[7,0.45,11,0.023,35,0.02,36,0.02,332,4.044,474,4.044,475,3.76,477,3.76,803,3.387,804,4.26,805,5.019,806,5.019,807,6.635,808,5.019,809,5.019]],["title/miscellaneous/functions.html",[224,3.115,803,1.947]],["body/miscellaneous/functions.html",[7,0.478,11,0.021,35,0.021,36,0.021,224,3.995,766,4.527,768,5.577,803,3.599,810,5.333]],["title/index.html",[7,0.259,811,2.886,812,2.886]],["body/index.html",[4,0.21,11,0.024,31,2.15,35,0.017,36,0.017,226,3.224,381,2.563,753,2.846,813,3.798,814,3.798,815,5.027,816,3.798,817,3.798,818,3.798,819,3.798,820,3.798,821,3.798,822,5.635,823,3.798,824,3.798,825,3.798,826,6.539,827,3.798,828,3.798,829,3.798,830,6.411,831,3.798,832,3.798,833,5.027,834,3.798,835,3.798,836,3.798,837,3.798,838,5.027,839,5.027,840,3.798,841,3.798,842,3.798,843,5.027,844,5.027,845,3.798,846,3.798,847,3.798,848,3.798,849,3.798,850,3.224,851,3.798,852,3.798,853,3.798,854,3.798,855,3.798,856,3.798,857,3.798,858,3.798,859,3.798,860,3.224,861,3.798,862,3.798,863,3.798,864,3.798,865,3.798,866,3.798,867,3.224]],["title/modules.html",[39,2.296]],["body/modules.html",[11,0.02,35,0.02,36,0.02,38,3.312,39,2.388,44,3.021,45,2.778,46,2.778,47,2.778,850,5.721,868,6.74,869,6.74,870,6.74]],["title/overview.html",[871,4.005]],["body/overview.html",[2,1.389,11,0.023,24,3.06,35,0.016,36,0.016,38,4.586,39,1.702,40,2.315,41,2.97,42,2.97,43,2.97,44,3.941,45,3.689,46,3.543,47,3.625,48,2.693,49,1.98,50,1.98,89,2.153,94,1.223,135,3.06,144,1.832,155,2.97,156,2.97,157,3.327,325,3.354,355,2.97,356,2.97,358,2.97,377,3.354,379,3.354,560,2.97,561,2.97,562,2.97,679,2.97,680,2.97,681,2.97,746,2.153,871,2.97,872,4.758,873,3.498,874,3.498,875,3.498,876,3.498]],["title/properties.html",[147,1.284,773,2.449]],["body/properties.html",[11,0.024,31,2.975,35,0.021,36,0.021,147,1.623,860,4.462,867,4.462,877,5.257,878,5.257,879,5.257]],["title/interfaces/resComment.html",[405,1.956,745,1.568]],["body/interfaces/resComment.html",[3,0.255,4,0.222,5,0.222,7,0.36,11,0.023,18,2.435,27,0.331,35,0.018,36,0.018,77,0.57,131,1.844,147,1.611,148,2.015,255,2.366,256,4.76,257,3.91,259,2.882,276,3.773,405,2.953,406,2.473,502,2.473,636,3.011,745,2.367,746,2.473,762,3.011]],["title/interfaces/resFindComment.html",[406,2.127,745,1.568]],["body/interfaces/resFindComment.html",[3,0.249,4,0.217,5,0.217,7,0.351,11,0.023,18,2.411,27,0.326,35,0.017,36,0.017,77,0.58,131,1.83,147,1.585,148,2.008,255,2.348,256,4.722,257,3.879,259,2.86,276,3.737,405,2.218,406,3.159,502,3.522,636,4.549,745,2.328,746,2.412,762,2.936]],["title/interfaces/resPost.html",[668,2.333,745,1.568]],["body/interfaces/resPost.html",[3,0.282,4,0.245,5,0.245,7,0.398,11,0.023,18,2.41,27,0.282,35,0.019,36,0.019,77,0.57,131,1.846,147,1.716,148,1.939,255,2.369,257,3.914,259,2.885,276,3.734,668,3.75,745,2.013,746,2.73,769,3.766]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["0",{"_index":295,"title":{},"body":{"entities/Comments.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":878,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["0.5.3",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["0})@apiproperty",{"_index":269,"title":{},"body":{"entities/Comments.html":{}}}],["1",{"_index":431,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["1.0.0",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":874,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":476,"title":{},"body":{"injectables/CommentsService.html":{}}}],["2.0.0",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":465,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["201",{"_index":455,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["3",{"_index":873,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":876,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":497,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/LikesService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["422",{"_index":471,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["5",{"_index":872,"title":{},"body":{"overview.html":{}}}],["5.2.1",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":875,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":247,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["again",{"_index":470,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["already",{"_index":617,"title":{},"body":{"injectables/LikesService.html":{}}}],["amazing",{"_index":851,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":322,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["apibearerauth('access",{"_index":305,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["apicreatedresponse",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["apicreatedresponse({description",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["apinotfoundresponse",{"_index":662,"title":{},"body":{"controllers/PostController.html":{}}}],["apiokresponse",{"_index":323,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["apiokresponse({isarray",{"_index":654,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":151,"title":{},"body":{"classes/AuthLoginDto.html":{},"entities/Comments.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"entities/Likes.html":{},"classes/PagingDto.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{}}}],["apitags",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["apitags('auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('comments",{"_index":335,"title":{},"body":{"controllers/CommentsController.html":{}}}],["apitags('likes",{"_index":556,"title":{},"body":{"controllers/LikesController.html":{}}}],["apitags('posts",{"_index":670,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('root",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["app",{"_index":828,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":821,"title":{},"body":{"index.html":{}}}],["apply(createpostmiddleware",{"_index":689,"title":{},"body":{"modules/PostModule.html":{}}}],["appmodule",{"_index":38,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":24,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":221,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["array",{"_index":384,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{}}}],["async",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["auditmiddleware",{"_index":99,"title":{"injectables/AuditMiddleware.html":{}},"body":{"injectables/AuditMiddleware.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["auth",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":329,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["auth.guard.ts",{"_index":517,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":328,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["auth/register",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":121,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":518,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":519,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authlogindto",{"_index":128,"title":{"classes/AuthLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authmodule",{"_index":44,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":860,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":135,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["backers",{"_index":852,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":594,"title":{},"body":{"injectables/LikesService.html":{}}}],["badrequestexception('like",{"_index":603,"title":{},"body":{"injectables/LikesService.html":{}}}],["baseentity",{"_index":286,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["bcryptjs",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["before",{"_index":229,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["benchmarkinterceptor",{"_index":69,"title":{"injectables/BenchmarkInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/BenchmarkInterceptor.html":{},"coverage.html":{}}}],["body",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["boolean",{"_index":502,"title":{},"body":{"classes/CreateLikeDto.html":{},"entities/Likes.html":{},"interfaces/ReqResponse.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["bootstrap",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":870,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":868,"title":{},"body":{"modules.html":{}}}],["building",{"_index":816,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":207,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["cascade",{"_index":296,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["cascade'})@joincolumn({name",{"_index":274,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["class",{"_index":28,"title":{"classes/AuthLoginDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"classes/PagingDto.html":{},"classes/UpdatePostDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":144,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"classes/PagingDto.html":{},"classes/UpdatePostDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":355,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_exports",{"_index":356,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_imports",{"_index":357,"title":{},"body":{"modules/CommentsModule.html":{}}}],["cluster_commentsmodule_providers",{"_index":358,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_likesmodule",{"_index":560,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_likesmodule_exports",{"_index":561,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_likesmodule_providers",{"_index":562,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":679,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":680,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":681,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["collect",{"_index":632,"title":{},"body":{"injectables/LikesService.html":{}}}],["collect.push",{"_index":635,"title":{},"body":{"injectables/LikesService.html":{}}}],["column",{"_index":281,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["column({default",{"_index":268,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["column({nullable",{"_index":260,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["comment",{"_index":309,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"entities/Posts.html":{}}}],["comment'})@delete(':id",{"_index":312,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment'})@post",{"_index":307,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{}}}],["comment.content",{"_index":451,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment.id",{"_index":633,"title":{},"body":{"injectables/LikesService.html":{}}}],["comment.likes",{"_index":540,"title":{},"body":{"entities/Likes.html":{}}}],["comment.post",{"_index":738,"title":{},"body":{"entities/Posts.html":{}}}],["comment.postid",{"_index":452,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentid",{"_index":352,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateLikeDto.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{}}}],["commentislikedbyuser",{"_index":369,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentislikedbyuser(comments",{"_index":383,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentrepository",{"_index":380,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments",{"_index":67,"title":{"entities/Comments.html":{}},"body":{"modules/AppModule.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"entities/Posts.html":{},"coverage.html":{}}}],["comments.content",{"_index":425,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments.controller",{"_index":363,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.entity",{"_index":548,"title":{},"body":{"entities/Likes.html":{},"entities/Posts.html":{}}}],["comments.id",{"_index":424,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments.likescount",{"_index":428,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments.postedat",{"_index":426,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments.senderid",{"_index":427,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comments.service",{"_index":326,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["comments/comments.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/LikesModule.html":{}}}],["comments/comments.service",{"_index":595,"title":{},"body":{"injectables/LikesService.html":{}}}],["comments/dto/paging.comment.dto",{"_index":667,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["comments/dto/response.comment.dto",{"_index":597,"title":{},"body":{"injectables/LikesService.html":{}}}],["comments/dto/update.comment.dto",{"_index":596,"title":{},"body":{"injectables/LikesService.html":{}}}],["commentscontroller",{"_index":298,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":45,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsservice",{"_index":325,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"coverage.html":{},"overview.html":{}}}],["commentstatus",{"_index":332,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"miscellaneous/enumerations.html":{}}}],["commentstatus.dislike",{"_index":611,"title":{},"body":{"injectables/LikesService.html":{}}}],["commentstatus.like",{"_index":610,"title":{},"body":{"injectables/LikesService.html":{}}}],["commentstatus.switch_dislike",{"_index":622,"title":{},"body":{"injectables/LikesService.html":{}}}],["commentstatus.switch_like",{"_index":619,"title":{},"body":{"injectables/LikesService.html":{}}}],["configmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["configure(consumer",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["console.log('logging",{"_index":117,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["console.log(`endpoint",{"_index":232,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["console.log(`execution",{"_index":250,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["console.log(userid",{"_index":481,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["const",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["constructor",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["constructor(commentsservice",{"_index":574,"title":{},"body":{"injectables/LikesService.html":{}}}],["constructor(postrepository",{"_index":699,"title":{},"body":{"injectables/PostService.html":{}}}],["constructor(postservice",{"_index":376,"title":{},"body":{"injectables/CommentsService.html":{}}}],["constructor(private",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["constructor(request",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["consumer.apply(auditmiddleware).forroutes",{"_index":688,"title":{},"body":{"modules/PostModule.html":{}}}],["consumer.apply(createcommentmiddleware).forroutes",{"_index":367,"title":{},"body":{"modules/CommentsModule.html":{}}}],["consumer.apply(validusermiddleware).forroutes",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["content",{"_index":255,"title":{},"body":{"entities/Comments.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["context",{"_index":209,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["context.switchtohttp",{"_index":216,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('comments",{"_index":337,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('likes",{"_index":557,"title":{},"body":{"controllers/LikesController.html":{}}}],["controller('posts",{"_index":671,"title":{},"body":{"controllers/PostController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["coverage",{"_index":753,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":300,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["create(@body",{"_index":343,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["create(comment",{"_index":303,"title":{},"body":{"controllers/CommentsController.html":{}}}],["create(like",{"_index":552,"title":{},"body":{"controllers/LikesController.html":{}}}],["create(post",{"_index":647,"title":{},"body":{"controllers/PostController.html":{}}}],["createcomment",{"_index":370,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcomment(comment",{"_index":387,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":304,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommentmiddleware",{"_index":364,"title":{"injectables/CreateCommentMiddleware.html":{}},"body":{"modules/CommentsModule.html":{},"injectables/CreateCommentMiddleware.html":{},"coverage.html":{}}}],["created",{"_index":458,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["createdatecolumn",{"_index":282,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{}}}],["createlikedto",{"_index":498,"title":{"classes/CreateLikeDto.html":{}},"body":{"classes/CreateLikeDto.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"coverage.html":{}}}],["createpost",{"_index":693,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(post",{"_index":702,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostdto",{"_index":508,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostmiddleware",{"_index":513,"title":{"injectables/CreatePostMiddleware.html":{}},"body":{"injectables/CreatePostMiddleware.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":447,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["createquerybuilder('comments",{"_index":422,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createquerybuilder('posts",{"_index":720,"title":{},"body":{"injectables/PostService.html":{}}}],["ctx",{"_index":215,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["ctx.getrequest",{"_index":217,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["data",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["data.commentid",{"_index":613,"title":{},"body":{"injectables/LikesService.html":{}}}],["data.dislike",{"_index":602,"title":{},"body":{"injectables/LikesService.html":{}}}],["data.hasdisliked",{"_index":626,"title":{},"body":{"injectables/LikesService.html":{}}}],["data.hasliked",{"_index":627,"title":{},"body":{"injectables/LikesService.html":{}}}],["data.id",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{}}}],["data.like",{"_index":601,"title":{},"body":{"injectables/LikesService.html":{}}}],["data.limit",{"_index":415,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["data.pageindex",{"_index":411,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["data.pagesize",{"_index":413,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["data.senderid",{"_index":628,"title":{},"body":{"injectables/LikesService.html":{}}}],["database",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":276,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["date.now",{"_index":219,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{}}}],["default",{"_index":294,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["defined",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{}}}],["delete",{"_index":301,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["delete(':id",{"_index":346,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["delete(@param('id",{"_index":347,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["delete(id",{"_index":310,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["deletecomment",{"_index":371,"title":{},"body":{"injectables/CommentsService.html":{}}}],["deletecomment(id",{"_index":389,"title":{},"body":{"injectables/CommentsService.html":{}}}],["deleted",{"_index":466,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["deletepost",{"_index":694,"title":{},"body":{"injectables/PostService.html":{}}}],["deletepost(id",{"_index":704,"title":{},"body":{"injectables/PostService.html":{}}}],["dependencies",{"_index":40,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":434,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["description",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":829,"title":{},"body":{"index.html":{}}}],["dislike",{"_index":474,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateLikeDto.html":{},"injectables/LikesService.html":{},"miscellaneous/enumerations.html":{}}}],["documentation",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":242,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["dto/auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":663,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto/create.comment.dto",{"_index":324,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["dto/create.like.dto",{"_index":554,"title":{},"body":{"controllers/LikesController.html":{},"injectables/LikesService.html":{}}}],["dto/paging.comment.dto",{"_index":334,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["dto/response.comment.dto",{"_index":407,"title":{},"body":{"injectables/CommentsService.html":{}}}],["dto/response.post.dto",{"_index":669,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/update",{"_index":666,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto/update.comment.dto",{"_index":333,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["e2e",{"_index":840,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":817,"title":{},"body":{"index.html":{}}}],["entities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{},"overview.html":{}}}],["entities/comments.entity",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{}}}],["entities/likes.entity",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{}}}],["entities/posts.entity",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["entity",{"_index":253,"title":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{},"coverage.html":{}}}],["entity('comments",{"_index":290,"title":{},"body":{"entities/Comments.html":{}}}],["entity('likes",{"_index":549,"title":{},"body":{"entities/Likes.html":{}}}],["entity('posts",{"_index":744,"title":{},"body":{"entities/Posts.html":{}}}],["enumerations",{"_index":804,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":460,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"interfaces/ReqResponse.html":{}}}],["execute",{"_index":453,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["executes",{"_index":236,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["executioncontext",{"_index":206,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["expiresin",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["exports",{"_index":360,"title":{},"body":{"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}}}],["express",{"_index":115,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":291,"title":{},"body":{"entities/Comments.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["extractjwt",{"_index":525,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":293,"title":{},"body":{"entities/Comments.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["false})@apiproperty",{"_index":261,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["find",{"_index":302,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["find(postid",{"_index":314,"title":{},"body":{"controllers/CommentsController.html":{}}}],["findcomment",{"_index":372,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findcomment(id",{"_index":391,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findcomments",{"_index":373,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findcomments(postid",{"_index":393,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findlikes",{"_index":567,"title":{},"body":{"injectables/LikesService.html":{}}}],["findlikes(commentid",{"_index":577,"title":{},"body":{"injectables/LikesService.html":{}}}],["findlikesbycommentid",{"_index":568,"title":{},"body":{"injectables/LikesService.html":{}}}],["findlikesbycommentid(commentid",{"_index":579,"title":{},"body":{"injectables/LikesService.html":{}}}],["findpostbyid",{"_index":695,"title":{},"body":{"injectables/PostService.html":{}}}],["findpostbyid(id",{"_index":706,"title":{},"body":{"injectables/PostService.html":{}}}],["findpostbyidandsenderid",{"_index":696,"title":{},"body":{"injectables/PostService.html":{}}}],["findpostbyidandsenderid(id",{"_index":708,"title":{},"body":{"injectables/PostService.html":{}}}],["findposts",{"_index":697,"title":{},"body":{"injectables/PostService.html":{}}}],["findposts(data",{"_index":710,"title":{},"body":{"injectables/PostService.html":{}}}],["forroutes",{"_index":690,"title":{},"body":{"modules/PostModule.html":{}}}],["forwardref",{"_index":362,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{}}}],["found",{"_index":443,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{}}}],["foundcomment",{"_index":472,"title":{},"body":{"injectables/CommentsService.html":{}}}],["foundcomment.likescount",{"_index":473,"title":{},"body":{"injectables/CommentsService.html":{}}}],["framework",{"_index":815,"title":{},"body":{"index.html":{}}}],["function",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":224,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/BenchmarkInterceptor.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":436,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["getposts",{"_index":646,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@body",{"_index":672,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(data",{"_index":653,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":811,"title":{"index.html":{}},"body":{}}],["grow",{"_index":847,"title":{},"body":{"index.html":{}}}],["handle",{"_index":237,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["handler",{"_index":231,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["handler(it",{"_index":240,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["hasdisliked",{"_index":538,"title":{},"body":{"entities/Likes.html":{},"injectables/LikesService.html":{}}}],["hasliked",{"_index":539,"title":{},"body":{"entities/Likes.html":{},"injectables/LikesService.html":{}}}],["haslikedbyuser",{"_index":636,"title":{},"body":{"injectables/LikesService.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["hello",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":223,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["here",{"_index":857,"title":{},"body":{"index.html":{}}}],["host",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":399,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["httpexception('content",{"_index":496,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{}}}],["httpexception('userid",{"_index":752,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["https://nestjs.com",{"_index":864,"title":{},"body":{"index.html":{}}}],["id",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"injectables/ValidUserMiddleware.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["identifier",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":116,"title":{},"body":{"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"injectables/BenchmarkInterceptor.html":{},"modules/CommentsModule.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"modules/PostModule.html":{},"injectables/ValidUserMiddleware.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}}}],["includes",{"_index":222,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["inherits",{"_index":220,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["inject",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["inject(forwardref",{"_index":408,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{}}}],["inject(request",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["injectable",{"_index":93,"title":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["injectables",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{},"overview.html":{}}}],["injectrepository",{"_index":402,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["injectrepository(comments",{"_index":409,"title":{},"body":{"injectables/CommentsService.html":{}}}],["injectrepository(likes",{"_index":598,"title":{},"body":{"injectables/LikesService.html":{}}}],["injectrepository(posts",{"_index":718,"title":{},"body":{"injectables/PostService.html":{}}}],["insert",{"_index":448,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["installation",{"_index":825,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":827,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":204,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["intercept(context",{"_index":205,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["interceptors",{"_index":228,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["interceptors/benchmark.interceptor",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["interface",{"_index":745,"title":{"interfaces/ReqResponse.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}},"body":{"interfaces/ReqResponse.html":{},"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["interfaces",{"_index":746,"title":{},"body":{"interfaces/ReqResponse.html":{},"overview.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["into(comments",{"_index":449,"title":{},"body":{"injectables/CommentsService.html":{}}}],["into(posts",{"_index":726,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":118,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["isarray",{"_index":339,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["isboolean",{"_index":506,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["isboolean()@apiproperty()@isoptional",{"_index":503,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["isglobal",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":152,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{}}}],["isnotempty()@apiproperty",{"_index":500,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["isnotempty()@apiproperty({required",{"_index":149,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["isnotempty()@isnumber()@apiproperty",{"_index":485,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["isnotempty()@isstring()@apiproperty",{"_index":483,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["isnumber",{"_index":487,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/PagingDto.html":{}}}],["isnumber()@apiproperty",{"_index":640,"title":{},"body":{"classes/PagingDto.html":{}}}],["isoptional",{"_index":507,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["isstring",{"_index":488,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@apiproperty",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["join",{"_index":854,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":284,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["jwt",{"_index":528,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":327,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":157,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":861,"title":{},"body":{"index.html":{}}}],["license",{"_index":867,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":844,"title":{},"body":{"index.html":{}}}],["like.comment",{"_index":266,"title":{},"body":{"entities/Comments.html":{}}}],["like.senderid",{"_index":638,"title":{},"body":{"injectables/LikesService.html":{}}}],["likecomment",{"_index":569,"title":{},"body":{"injectables/LikesService.html":{}}}],["likecomment(data",{"_index":581,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistory",{"_index":605,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistory.length",{"_index":607,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistory[0].hasdisliked",{"_index":616,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistory[0].hasliked",{"_index":615,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistorycollect",{"_index":608,"title":{},"body":{"injectables/LikesService.html":{}}}],["likehistorycollect.push",{"_index":612,"title":{},"body":{"injectables/LikesService.html":{}}}],["likerepository",{"_index":575,"title":{},"body":{"injectables/LikesService.html":{}}}],["likes",{"_index":65,"title":{"entities/Likes.html":{}},"body":{"modules/AppModule.html":{},"entities/Comments.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"coverage.html":{}}}],["likes.controller",{"_index":564,"title":{},"body":{"modules/LikesModule.html":{}}}],["likes.entity",{"_index":288,"title":{},"body":{"entities/Comments.html":{}}}],["likes.service",{"_index":555,"title":{},"body":{"controllers/LikesController.html":{},"modules/LikesModule.html":{}}}],["likes/likes.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["likes/likes.service",{"_index":403,"title":{},"body":{"injectables/CommentsService.html":{}}}],["likescontroller",{"_index":550,"title":{"controllers/LikesController.html":{}},"body":{"controllers/LikesController.html":{},"modules/LikesModule.html":{},"coverage.html":{}}}],["likescount",{"_index":256,"title":{},"body":{"entities/Comments.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["likeservice",{"_index":378,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/LikesController.html":{}}}],["likesmodule",{"_index":46,"title":{"modules/LikesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules.html":{},"overview.html":{}}}],["likesservice",{"_index":379,"title":{"injectables/LikesService.html":{}},"body":{"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"coverage.html":{},"overview.html":{}}}],["likestate",{"_index":588,"title":{},"body":{"injectables/LikesService.html":{}}}],["limit",{"_index":414,"title":{},"body":{"injectables/CommentsService.html":{},"classes/PagingDto.html":{},"injectables/PostService.html":{}}}],["limit(limit",{"_index":435,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["local",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":491,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["logger.log('*******create",{"_index":493,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{}}}],["logger.log('*******middleware",{"_index":751,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["login",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(data",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(id",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["login.dto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto.ts",{"_index":146,"title":{},"body":{"classes/AuthLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:7",{"_index":150,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["manytoone",{"_index":283,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["manytoone(undefined",{"_index":271,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["matching",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["means",{"_index":241,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["message",{"_index":457,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"interfaces/ReqResponse.html":{}}}],["metadata",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BenchmarkInterceptor.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["middleware",{"_index":494,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{}}}],["middleware/audit.middleware",{"_index":686,"title":{},"body":{"modules/PostModule.html":{}}}],["middleware/auth.middleware",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["middleware/createcomment.middleware",{"_index":365,"title":{},"body":{"modules/CommentsModule.html":{}}}],["middleware/createpost.middleware",{"_index":684,"title":{},"body":{"modules/PostModule.html":{}}}],["middlewareconsumer",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["miscellaneous",{"_index":803,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":843,"title":{},"body":{"index.html":{}}}],["mode",{"_index":833,"title":{},"body":{"index.html":{}}}],["module",{"_index":37,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}}}],["modules",{"_index":39,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":226,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"index.html":{}}}],["mysql2",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":862,"title":{},"body":{"index.html":{}}}],["name",{"_index":110,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nest",{"_index":822,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":866,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":211,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"entities/Posts.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":114,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nestmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["new",{"_index":440,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["next",{"_index":106,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nextfunction",{"_index":107,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["node.js",{"_index":814,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":400,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["notfoundexception('comment",{"_index":478,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{}}}],["notfoundexception('post",{"_index":442,"title":{},"body":{"injectables/CommentsService.html":{}}}],["notfoundexception('this",{"_index":441,"title":{},"body":{"injectables/CommentsService.html":{}}}],["now",{"_index":218,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["now}ms",{"_index":252,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["npm",{"_index":826,"title":{},"body":{"index.html":{}}}],["null",{"_index":297,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{}}}],["nullable",{"_index":292,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["number",{"_index":148,"title":{},"body":{"classes/AuthLoginDto.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["observable",{"_index":210,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["ondelete",{"_index":273,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{}}}],["onetomany",{"_index":285,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{}}}],["onetomany(undefined",{"_index":265,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{}}}],["open",{"_index":845,"title":{},"body":{"index.html":{}}}],["optional",{"_index":111,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["orderby('comments.postedat",{"_index":433,"title":{},"body":{"injectables/CommentsService.html":{}}}],["orderby('posts.postedat",{"_index":725,"title":{},"body":{"injectables/PostService.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["overview",{"_index":871,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":773,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pageindex",{"_index":410,"title":{},"body":{"injectables/CommentsService.html":{},"classes/PagingDto.html":{},"injectables/PostService.html":{}}}],["pagesize",{"_index":412,"title":{},"body":{"injectables/CommentsService.html":{},"classes/PagingDto.html":{},"injectables/PostService.html":{}}}],["pagingdto",{"_index":315,"title":{"classes/PagingDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["param",{"_index":319,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["param('id",{"_index":351,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["param('postid",{"_index":341,"title":{},"body":{"controllers/CommentsController.html":{}}}],["parameters",{"_index":109,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["parseint(process.env.db_port",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":320,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["passport",{"_index":527,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["path'})@get",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perform",{"_index":246,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["pg",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":248,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["pipe(tap",{"_index":249,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["please",{"_index":855,"title":{},"body":{"index.html":{}}}],["port",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CreatePostMiddleware.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post'})@apinotfoundresponse()@put(':id",{"_index":659,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@delete(':id",{"_index":651,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@post('/create",{"_index":649,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@post(':postid",{"_index":317,"title":{},"body":{"controllers/CommentsController.html":{}}}],["post('/create",{"_index":674,"title":{},"body":{"controllers/PostController.html":{}}}],["post(':postid",{"_index":340,"title":{},"body":{"controllers/CommentsController.html":{}}}],["post('login",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.comments",{"_index":272,"title":{},"body":{"entities/Comments.html":{}}}],["post.content",{"_index":727,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":685,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":664,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dto.ts",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:7",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.service",{"_index":665,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["postcontroller",{"_index":644,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postdata",{"_index":713,"title":{},"body":{"injectables/PostService.html":{}}}],["postdata.content",{"_index":731,"title":{},"body":{"injectables/PostService.html":{}}}],["postedat",{"_index":257,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["postid",{"_index":258,"title":{},"body":{"entities/Comments.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{}}}],["postmodule",{"_index":47,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepository",{"_index":701,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":61,"title":{"entities/Posts.html":{}},"body":{"modules/AppModule.html":{},"entities/Comments.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"coverage.html":{}}}],["posts'})@post",{"_index":655,"title":{},"body":{"controllers/PostController.html":{}}}],["posts.content",{"_index":723,"title":{},"body":{"injectables/PostService.html":{}}}],["posts.entity",{"_index":289,"title":{},"body":{"entities/Comments.html":{}}}],["posts.postedat",{"_index":724,"title":{},"body":{"injectables/PostService.html":{}}}],["posts.senderid",{"_index":722,"title":{},"body":{"injectables/PostService.html":{}}}],["posts/create",{"_index":691,"title":{},"body":{"modules/PostModule.html":{}}}],["posts/post.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["posts/post.service",{"_index":404,"title":{},"body":{"injectables/CommentsService.html":{}}}],["postservice",{"_index":377,"title":{"injectables/PostService.html":{}},"body":{"injectables/CommentsService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["primarygeneratedcolumn",{"_index":263,"title":{},"body":{"entities/Comments.html":{},"entities/Likes.html":{},"entities/Posts.html":{}}}],["private",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["process.env.db_host",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_type",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_username",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":835,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":813,"title":{},"body":{"index.html":{}}}],["project",{"_index":846,"title":{},"body":{"index.html":{}}}],["promise",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["properties",{"_index":147,"title":{"properties.html":{}},"body":{"classes/AuthLoginDto.html":{},"entities/Comments.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"entities/Likes.html":{},"classes/PagingDto.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"properties.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["provide",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}}}],["put",{"_index":661,"title":{},"body":{"controllers/PostController.html":{}}}],["put(':id",{"_index":350,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["reach",{"_index":244,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["reaches",{"_index":230,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["read",{"_index":856,"title":{},"body":{"index.html":{}}}],["readable",{"_index":227,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["readonly",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["recognizecommentisliked",{"_index":570,"title":{},"body":{"injectables/LikesService.html":{}}}],["recognizecommentisliked(senderid",{"_index":583,"title":{},"body":{"injectables/LikesService.html":{}}}],["reflect",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":381,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"index.html":{}}}],["req",{"_index":112,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["req.body",{"_index":492,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["req.ip",{"_index":119,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["req.method",{"_index":495,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{}}}],["req.path",{"_index":120,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["reqresponse",{"_index":330,"title":{"interfaces/ReqResponse.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"interfaces/ReqResponse.html":{},"coverage.html":{}}}],["request",{"_index":103,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["request.method",{"_index":234,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["request.url",{"_index":233,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["requestmethod",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["requestmethod.post",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/PostModule.html":{}}}],["required",{"_index":154,"title":{},"body":{"classes/AuthLoginDto.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["res",{"_index":104,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["rescomment",{"_index":405,"title":{"interfaces/resComment.html":{}},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}],["resfindcomment",{"_index":406,"title":{"interfaces/resFindComment.html":{}},"body":{"injectables/CommentsService.html":{},"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["resp",{"_index":454,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["response",{"_index":105,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["respost",{"_index":668,"title":{"interfaces/resPost.html":{}},"body":{"controllers/PostController.html":{},"coverage.html":{},"interfaces/resPost.html":{}}}],["result",{"_index":420,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["result.length",{"_index":437,"title":{},"body":{"injectables/CommentsService.html":{}}}],["result[0",{"_index":634,"title":{},"body":{"injectables/LikesService.html":{}}}],["results",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["return",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["returns",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["rimraf",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["route",{"_index":239,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["run",{"_index":830,"title":{},"body":{"index.html":{}}}],["runs",{"_index":238,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["rxjs",{"_index":212,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":214,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["same",{"_index":604,"title":{},"body":{"injectables/LikesService.html":{}}}],["savedcomment",{"_index":344,"title":{},"body":{"controllers/CommentsController.html":{}}}],["savedlike",{"_index":558,"title":{},"body":{"controllers/LikesController.html":{}}}],["savedpost",{"_index":675,"title":{},"body":{"controllers/PostController.html":{}}}],["savelikerepo",{"_index":571,"title":{},"body":{"injectables/LikesService.html":{}}}],["savelikerepo(data",{"_index":585,"title":{},"body":{"injectables/LikesService.html":{}}}],["scalable",{"_index":818,"title":{},"body":{"index.html":{}}}],["schemas/response",{"_index":331,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["scope",{"_index":716,"title":{},"body":{"injectables/PostService.html":{}}}],["scope.request",{"_index":717,"title":{},"body":{"injectables/PostService.html":{}}}],["secret",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":423,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["select(['posts.id",{"_index":721,"title":{},"body":{"injectables/PostService.html":{}}}],["senderid",{"_index":259,"title":{},"body":{"entities/Comments.html":{},"injectables/CommentsService.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["sent",{"_index":235,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["server",{"_index":819,"title":{},"body":{"index.html":{}}}],["set",{"_index":625,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["side",{"_index":820,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip((pageindex",{"_index":430,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["something",{"_index":467,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"index.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["sponsors",{"_index":849,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../update.comment.dto.ts",{"_index":805,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:12",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:31",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":145,"title":{},"body":{"classes/AuthLoginDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":516,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":524,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:6",{"_index":522,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/comments/comments.controller.ts",{"_index":299,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:36",{"_index":318,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:49",{"_index":308,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:57",{"_index":313,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":359,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/comments.module.ts:27",{"_index":361,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/comments.service.ts",{"_index":368,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/comments/comments.service.ts:111",{"_index":390,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:136",{"_index":396,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:161",{"_index":398,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:23",{"_index":382,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:35",{"_index":394,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:73",{"_index":386,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:78",{"_index":392,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:83",{"_index":388,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/dto/create.comment.dto.ts",{"_index":482,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/create.comment.dto.ts:13",{"_index":486,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/create.comment.dto.ts:8",{"_index":484,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/paging.comment.dto.ts",{"_index":639,"title":{},"body":{"classes/PagingDto.html":{},"coverage.html":{}}}],["src/comments/dto/paging.comment.dto.ts:11",{"_index":643,"title":{},"body":{"classes/PagingDto.html":{}}}],["src/comments/dto/paging.comment.dto.ts:15",{"_index":641,"title":{},"body":{"classes/PagingDto.html":{}}}],["src/comments/dto/paging.comment.dto.ts:7",{"_index":642,"title":{},"body":{"classes/PagingDto.html":{}}}],["src/comments/dto/response.comment.dto.ts",{"_index":762,"title":{},"body":{"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{}}}],["src/comments/dto/update.comment.dto.ts",{"_index":806,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/entities/comments.entity.ts",{"_index":254,"title":{},"body":{"entities/Comments.html":{},"coverage.html":{}}}],["src/entities/comments.entity.ts:18",{"_index":264,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:22",{"_index":262,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:26",{"_index":270,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:30",{"_index":280,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:34",{"_index":279,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:40",{"_index":275,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:43",{"_index":267,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/comments.entity.ts:47",{"_index":278,"title":{},"body":{"entities/Comments.html":{}}}],["src/entities/likes.entity.ts",{"_index":537,"title":{},"body":{"entities/Likes.html":{},"coverage.html":{}}}],["src/entities/likes.entity.ts:15",{"_index":546,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/likes.entity.ts:19",{"_index":545,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/likes.entity.ts:23",{"_index":544,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/likes.entity.ts:27",{"_index":547,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/likes.entity.ts:31",{"_index":543,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/likes.entity.ts:37",{"_index":541,"title":{},"body":{"entities/Likes.html":{}}}],["src/entities/posts.entity.ts",{"_index":737,"title":{},"body":{"entities/Posts.html":{},"coverage.html":{}}}],["src/entities/posts.entity.ts:15",{"_index":741,"title":{},"body":{"entities/Posts.html":{}}}],["src/entities/posts.entity.ts:19",{"_index":740,"title":{},"body":{"entities/Posts.html":{}}}],["src/entities/posts.entity.ts:23",{"_index":743,"title":{},"body":{"entities/Posts.html":{}}}],["src/entities/posts.entity.ts:26",{"_index":739,"title":{},"body":{"entities/Posts.html":{}}}],["src/entities/posts.entity.ts:30",{"_index":742,"title":{},"body":{"entities/Posts.html":{}}}],["src/interceptors/benchmark.interceptor.ts",{"_index":203,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/benchmark.interceptor.ts:13",{"_index":208,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["src/likes/dto/create.like.dto.ts",{"_index":499,"title":{},"body":{"classes/CreateLikeDto.html":{},"coverage.html":{}}}],["src/likes/dto/create.like.dto.ts:13",{"_index":504,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["src/likes/dto/create.like.dto.ts:17",{"_index":501,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["src/likes/dto/create.like.dto.ts:8",{"_index":505,"title":{},"body":{"classes/CreateLikeDto.html":{}}}],["src/likes/likes.controller.ts",{"_index":551,"title":{},"body":{"controllers/LikesController.html":{},"coverage.html":{}}}],["src/likes/likes.controller.ts:21",{"_index":553,"title":{},"body":{"controllers/LikesController.html":{}}}],["src/likes/likes.module.ts",{"_index":563,"title":{},"body":{"modules/LikesModule.html":{}}}],["src/likes/likes.service.ts",{"_index":566,"title":{},"body":{"injectables/LikesService.html":{},"coverage.html":{}}}],["src/likes/likes.service.ts:113",{"_index":591,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:134",{"_index":586,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:150",{"_index":589,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:174",{"_index":584,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:196",{"_index":593,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:20",{"_index":576,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:30",{"_index":578,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:37",{"_index":580,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:44",{"_index":582,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/main.ts",{"_index":766,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/audit.middleware.ts",{"_index":100,"title":{},"body":{"injectables/AuditMiddleware.html":{},"coverage.html":{}}}],["src/middleware/audit.middleware.ts:6",{"_index":108,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["src/middleware/auth.middleware.ts",{"_index":749,"title":{},"body":{"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["src/middleware/auth.middleware.ts:12",{"_index":750,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["src/middleware/createcomment.middleware.ts",{"_index":489,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{},"coverage.html":{}}}],["src/middleware/createcomment.middleware.ts:12",{"_index":490,"title":{},"body":{"injectables/CreateCommentMiddleware.html":{}}}],["src/middleware/createpost.middleware.ts",{"_index":514,"title":{},"body":{"injectables/CreatePostMiddleware.html":{},"coverage.html":{}}}],["src/middleware/createpost.middleware.ts:12",{"_index":515,"title":{},"body":{"injectables/CreatePostMiddleware.html":{}}}],["src/posts/dto/create",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/response.post.dto.ts",{"_index":769,"title":{},"body":{"coverage.html":{},"interfaces/resPost.html":{}}}],["src/posts/dto/update",{"_index":748,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/post.controller.ts",{"_index":645,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/posts/post.controller.ts:38",{"_index":656,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:46",{"_index":650,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:56",{"_index":660,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.controller.ts:67",{"_index":652,"title":{},"body":{"controllers/PostController.html":{}}}],["src/posts/post.module.ts",{"_index":682,"title":{},"body":{"modules/PostModule.html":{}}}],["src/posts/post.module.ts:21",{"_index":683,"title":{},"body":{"modules/PostModule.html":{}}}],["src/posts/post.service.ts",{"_index":692,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/posts/post.service.ts:121",{"_index":709,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:132",{"_index":707,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:138",{"_index":715,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:20",{"_index":700,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:28",{"_index":711,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:49",{"_index":703,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:71",{"_index":714,"title":{},"body":{"injectables/PostService.html":{}}}],["src/posts/post.service.ts:97",{"_index":705,"title":{},"body":{"injectables/PostService.html":{}}}],["src/schemas/response.ts",{"_index":747,"title":{},"body":{"interfaces/ReqResponse.html":{},"coverage.html":{}}}],["start",{"_index":831,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":834,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":836,"title":{},"body":{"index.html":{}}}],["started",{"_index":812,"title":{"index.html":{}},"body":{}}],["starter",{"_index":824,"title":{},"body":{"index.html":{}}}],["statements",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":353,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"interfaces/ReqResponse.html":{}}}],["stay",{"_index":858,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":526,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Comments.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["success",{"_index":456,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"interfaces/ReqResponse.html":{}}}],["successfully",{"_index":459,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["super",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":850,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":869,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["switch_dislike",{"_index":809,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch_like",{"_index":808,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switchdislike",{"_index":477,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"miscellaneous/enumerations.html":{}}}],["switchlike",{"_index":475,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"miscellaneous/enumerations.html":{}}}],["synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["take(10",{"_index":432,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["tap",{"_index":213,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["test",{"_index":839,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":842,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":841,"title":{},"body":{"index.html":{}}}],["tests",{"_index":838,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":848,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(id",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.commentislikedbyuser(result",{"_index":438,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentrepository",{"_index":421,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentrepository.delete(id",{"_index":464,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentrepository.findone",{"_index":445,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentrepository.save(foundcomment",{"_index":479,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsservice.createcomment(comment",{"_index":345,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.deletecomment(id",{"_index":348,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.findcomment(data.commentid",{"_index":600,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.commentsservice.findcomments(postid",{"_index":342,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.updatecomment",{"_index":631,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.commentsservice.updatecomment(commentid",{"_index":354,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/LikesService.html":{}}}],["this.findcomment(id",{"_index":461,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.findlikes(data.commentid",{"_index":606,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.findpostbyid(id",{"_index":733,"title":{},"body":{"injectables/PostService.html":{}}}],["this.findpostbyidandsenderid(id",{"_index":729,"title":{},"body":{"injectables/PostService.html":{}}}],["this.jwtservice.sign(payload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.likerepository",{"_index":623,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likerepository.find",{"_index":599,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likerepository.findone",{"_index":637,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likerepository.save",{"_index":630,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likeservice.likecomment(like",{"_index":559,"title":{},"body":{"controllers/LikesController.html":{}}}],["this.likeservice.recognizecommentisliked(userid",{"_index":444,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postrepository",{"_index":719,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete(id",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findone",{"_index":736,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.createpost(post",{"_index":676,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.deletepost(id",{"_index":678,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findpostbyid(comment.postid",{"_index":446,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postservice.findpostbyid(postid",{"_index":419,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postservice.findposts(data",{"_index":673,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.updatepost(id",{"_index":677,"title":{},"body":{"controllers/PostController.html":{}}}],["this.request.user",{"_index":417,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["this.savelikerepo(likehistorycollect[0",{"_index":614,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.updatelikecount",{"_index":621,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.updatelikecount(data.commentid",{"_index":609,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.updatelikerepo(likehistory[0",{"_index":620,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.validateuser(comment.senderid",{"_index":463,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.validateuser(post.senderid",{"_index":734,"title":{},"body":{"injectables/PostService.html":{}}}],["throw",{"_index":439,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["time",{"_index":251,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["token",{"_index":338,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["token')@apicreatedresponse({description",{"_index":311,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["token')@apicreatedresponse({type",{"_index":306,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["token')@apiokresponse({isarray",{"_index":316,"title":{},"body":{"controllers/CommentsController.html":{}}}],["touch",{"_index":859,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthLoginDto.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Posts.html":{}}}],["true})@apiproperty",{"_index":542,"title":{},"body":{"entities/Likes.html":{},"entities/Posts.html":{}}}],["twitter",{"_index":865,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"entities/Comments.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"injectables/CreateCommentMiddleware.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/JwtStrategy.html":{},"entities/Likes.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"classes/PagingDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"interfaces/ReqResponse.html":{},"classes/UpdatePostDto.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"interfaces/resComment.html":{},"interfaces/resFindComment.html":{},"interfaces/resPost.html":{}}}],["typeorm",{"_index":287,"title":{},"body":{"entities/Comments.html":{},"injectables/CommentsService.html":{},"entities/Likes.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{},"entities/Posts.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{}}}],["typeormmodule.forfeature([comments",{"_index":366,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([likes",{"_index":565,"title":{},"body":{"modules/LikesModule.html":{}}}],["typeormmodule.forfeature([posts",{"_index":687,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forroot",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":823,"title":{},"body":{"index.html":{}}}],["ui",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":401,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["undefined})@createdatecolumn",{"_index":277,"title":{},"body":{"entities/Comments.html":{},"entities/Posts.html":{}}}],["unit",{"_index":837,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["unlicensed",{"_index":879,"title":{},"body":{"properties.html":{}}}],["update",{"_index":349,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostController.html":{}}}],["update(likes",{"_index":624,"title":{},"body":{"injectables/LikesService.html":{}}}],["update(post",{"_index":657,"title":{},"body":{"controllers/PostController.html":{}}}],["update(posts",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["updatecomment",{"_index":374,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatecomment(id",{"_index":395,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updated",{"_index":480,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["updatelikecount",{"_index":572,"title":{},"body":{"injectables/LikesService.html":{}}}],["updatelikecount(commentid",{"_index":587,"title":{},"body":{"injectables/LikesService.html":{}}}],["updatelikerepo",{"_index":573,"title":{},"body":{"injectables/LikesService.html":{}}}],["updatelikerepo(data",{"_index":590,"title":{},"body":{"injectables/LikesService.html":{}}}],["updatepost",{"_index":698,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(id",{"_index":712,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepostdto",{"_index":658,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["use",{"_index":101,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["use(req",{"_index":102,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["useclass",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":245,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["usefactory",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":321,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["useguards(jwtauthguard",{"_index":336,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/LikesController.html":{},"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@apibearerauth('access",{"_index":648,"title":{},"body":{"controllers/PostController.html":{}}}],["user",{"_index":416,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["user.id",{"_index":418,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["userid",{"_index":385,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["username",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":462,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["validate",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":523,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":375,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["validateuser(id",{"_index":592,"title":{},"body":{"injectables/LikesService.html":{}}}],["validateuser(senderid",{"_index":397,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["validator",{"_index":153,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLikeDto.html":{},"classes/CreatePostDto.html":{},"classes/PagingDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["validpost",{"_index":728,"title":{},"body":{"injectables/PostService.html":{}}}],["validpost.senderid",{"_index":732,"title":{},"body":{"injectables/PostService.html":{}}}],["validusermiddleware",{"_index":173,"title":{"injectables/ValidUserMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["value",{"_index":807,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":450,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["version",{"_index":877,"title":{},"body":{"properties.html":{}}}],["void",{"_index":113,"title":{},"body":{"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"injectables/CreateCommentMiddleware.html":{},"injectables/CreatePostMiddleware.html":{},"modules/PostModule.html":{},"injectables/ValidUserMiddleware.html":{}}}],["voted",{"_index":618,"title":{},"body":{"injectables/LikesService.html":{}}}],["watch",{"_index":832,"title":{},"body":{"index.html":{}}}],["website",{"_index":863,"title":{},"body":{"index.html":{}}}],["went",{"_index":468,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["where('comments.postid",{"_index":429,"title":{},"body":{"injectables/CommentsService.html":{}}}],["where('id",{"_index":629,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostService.html":{}}}],["won't",{"_index":243,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["world",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":225,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["wrong",{"_index":469,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostService.html":{}}}],["you'd",{"_index":853,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/LikesModule.html":{},"modules/PostModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({description: 'Root Path'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\n\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiCreatedResponse({ description: 'Root Path' })\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nLikesModule\n\nLikesModule\n\nAppModule -->\n\nLikesModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            LikesModule\n                        \n                        \n                            PostModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostModule } from './posts/post.module';\nimport { Posts } from './entities/posts.entity';\nimport { CommentsModule } from './comments/comments.module';\nimport { LikesModule } from './likes/likes.module';\nimport { Likes } from './entities/likes.entity';\nimport { Comments } from './entities/comments.entity';\nimport { BenchmarkInterceptor } from './interceptors/benchmark.interceptor';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: process.env.DB_TYPE as any,\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      entities: [Posts, Comments, Likes],\n\n      synchronize: true,\n    }),\n    AuthModule,\n    PostModule,\n    CommentsModule,\n    LikesModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: BenchmarkInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditMiddleware.html":{"url":"injectables/AuditMiddleware.html","title":"injectable - AuditMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/audit.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/audit.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class AuditMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Logging request IP... ', req.ip);\n    console.log('Logging request Path...', req.path);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(id: AuthLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { AuthLoginDto } from './dto/auth-login.dto';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() id: AuthLoginDto) {\n    return await this.authService.login(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLoginDto.html":{"url":"classes/AuthLoginDto.html","title":"class - AuthLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-login.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class AuthLoginDto {\n  @IsNotEmpty()\n  @ApiProperty({ required: true })\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  NestModule,\n  MiddlewareConsumer,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ValidUserMiddleware } from '../middleware/auth.middleware';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async () => ({\n        secret: process.env.JWT_SECRET,\n        signOptions: { expiresIn: '1d' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(ValidUserMiddleware).forRoutes({\n      path: 'auth/register',\n      method: RequestMethod.POST,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(data: AuthLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { AuthLoginDto } from './dto/auth-login.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(REQUEST)\n    private readonly request,\n    private jwtService: JwtService,\n  ) {}\n\n  async login(data: AuthLoginDto): Promise {\n    const payload = { id: data.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BenchmarkInterceptor.html":{"url":"injectables/BenchmarkInterceptor.html","title":"injectable - BenchmarkInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BenchmarkInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/benchmark.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/benchmark.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request } from 'express';\n\n@Injectable()\nexport class BenchmarkInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const ctx = context.switchToHttp();\n    const request: Request = ctx.getRequest();\n\n    const now = Date.now();\n    //executionContext inherits from ArgumentsHost which includes some helper functions to write more readable interceptors\n    //before request reaches the handler\n    console.log(`Endpoint:  ${request.url}, Method: ${request.method}`);\n\n    //when response is sent\n    //callHandler executes the handle() method which runs route handler(it means if we don't use handle() method, our request won't reach to route handler)\n    //tap() is used to perform some action after the response is sent\n    //pipe() is used to perform some action before the response is sent\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`Execution Time:  ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comments.html":{"url":"entities/Comments.html","title":"entity - Comments","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/comments.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                likes\n                            \n                            \n                                likesCount\n                            \n                            \n                                post\n                            \n                            \n                                postedAt\n                            \n                            \n                                postId\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Likes[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.comment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Posts\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {onDelete: 'CASCADE'})@JoinColumn({name: 'postId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/comments.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  BaseEntity,\n} from 'typeorm';\nimport { Likes } from './likes.entity';\nimport { Posts } from './posts.entity';\n\n@Entity('comments')\nexport class Comments extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: false })\n  @ApiProperty()\n  content: string;\n\n  @Column({ default: 0 })\n  @ApiProperty()\n  likesCount: number;\n\n  @Column({ nullable: false })\n  @ApiProperty()\n  senderId: number;\n\n  @Column({ nullable: false })\n  @ApiProperty()\n  postId: number;\n\n  @ManyToOne(() => Posts, (post) => post.comments, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'postId' })\n  post: Posts;\n\n  @OneToMany(() => Likes, (like) => like.comment)\n  likes: Likes[];\n\n  @Column({ default: null })\n  @CreateDateColumn()\n  postedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(Comment: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiCreatedResponse({type: CreateCommentDto, description: 'Create A Comment'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiCreatedResponse({description: 'Delete A Comment'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(postId: number, data: PagingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiOkResponse({isArray: true, description: 'Get Comments of a post'})@Post(':postId')\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PagingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Param,\n  ParseIntPipe,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreateCommentDto } from './dto/create.comment.dto';\nimport { CommentsService } from './comments.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { ReqResponse } from '../schemas/response';\n// import { CommentStatus } from './dto/update.comment.dto';\nimport { PagingDto } from './dto/paging.comment.dto';\n\n@ApiTags('Comments')\n@UseGuards(JwtAuthGuard)\n@Controller('comments')\nexport class CommentsController {\n  constructor(private readonly commentsService: CommentsService) {}\n\n  @ApiBearerAuth('access-token')\n  @ApiOkResponse({\n    isArray: true,\n    description: 'Get Comments of a post',\n  })\n  @Post(':postId')\n  async find(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Body() data: PagingDto,\n  ) {\n    return await this.commentsService.findComments(postId, data);\n  }\n\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({\n    type: CreateCommentDto,\n    description: 'Create A Comment',\n  })\n  @Post()\n  async create(@Body() Comment: CreateCommentDto): Promise {\n    const savedComment = await this.commentsService.createComment(Comment);\n    return savedComment;\n  }\n\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({ description: 'Delete A Comment' })\n  @Delete(':id')\n  async delete(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.commentsService.deleteComment(id);\n  }\n\n  // @ApiBearerAuth('access-token')\n  // @ApiCreatedResponse({ description: 'Update A Comment' })\n  // @Put(':id')\n  // async update(\n  //   @Param('id', ParseIntPipe) commentId: number,\n  //   @Body() status: CommentStatus,\n  // ): Promise {\n\n  //   return await this.commentsService.updateComment(commentId, status);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_exports\n\n\n\ncluster_CommentsModule_imports\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nPostModule\n\nPostModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nPostModule->CommentsModule\n\n\n\n\n\nCommentsService \n\nCommentsService \n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  forwardRef,\n  NestModule,\n  RequestMethod,\n  MiddlewareConsumer,\n} from '@nestjs/common';\nimport { CommentsService } from './comments.service';\nimport { CommentsController } from './comments.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Comments } from '../entities/comments.entity';\nimport { LikesModule } from '../likes/likes.module';\nimport { PostModule } from '../posts/post.module';\nimport { CreateCommentMiddleware } from '../middleware/createComment.middleware';\n\n@Module({\n  imports: [\n    forwardRef(() => LikesModule),\n    TypeOrmModule.forFeature([Comments]),\n    PostModule,\n  ],\n  providers: [CommentsService],\n  controllers: [CommentsController],\n  exports: [CommentsService],\n})\nexport class CommentsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(CreateCommentMiddleware).forRoutes({\n      path: '/comments',\n      method: RequestMethod.POST,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentIsLikedByUser\n                            \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                findComment\n                            \n                            \n                                    Async\n                                findComments\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostService, likeService: LikesService, commentRepository: Repository, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        likeService\n                                                  \n                                                        \n                                                                        LikesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentIsLikedByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentIsLikedByUser(comments: Array, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comments\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    findComment(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    findComments(postId: number, data: PagingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PagingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(id: number, data: CommentStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CommentStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(senderId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ReqResponse } from '../schemas/response';\nimport { Repository } from 'typeorm';\nimport { Comments } from '../entities/comments.entity';\nimport { CreateCommentDto } from './dto/create.comment.dto';\nimport { Request } from 'express';\nimport { CommentStatus } from './dto/update.comment.dto';\nimport { LikesService } from '../likes/likes.service';\nimport { PagingDto } from './dto/paging.comment.dto';\nimport { PostService } from '../posts/post.service';\nimport { resComment, resFindComment } from './dto/response.comment.dto';\n\n@Injectable()\nexport class CommentsService {\n  constructor(\n    private postService: PostService,\n    @Inject(forwardRef(() => LikesService))\n    private likeService: LikesService,\n    @InjectRepository(Comments)\n    private readonly commentRepository: Repository,\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  // find comments by post id\n  async findComments(\n    postId: number,\n    data: PagingDto,\n  ): Promise> {\n    const pageIndex = data.pageIndex;\n    const pageSize = data.pageSize;\n    const limit = data.limit;\n    const user: any = this.request.user;\n    const userId: number = user.id;\n\n    const post = await this.postService.findPostById(postId);\n    if (post) {\n      const result = await this.commentRepository\n        .createQueryBuilder('comments')\n        .select([\n          'comments.id',\n          'comments.content',\n          'comments.postedAt',\n          'comments.senderId',\n          'comments.likesCount',\n        ])\n        .where('comments.postId = :postId', { postId })\n        .skip((pageIndex - 1) * pageSize)\n        .take(10)\n        .orderBy('comments.postedAt', 'DESC')\n        .limit(limit)\n        .getMany();\n\n      if (result.length > 0) {\n        return await this.commentIsLikedByUser(result, userId);\n      } else {\n        throw new NotFoundException('this post has no post yet');\n      }\n    } else {\n      throw new NotFoundException('post not found');\n    }\n  }\n\n  async commentIsLikedByUser(comments: Array, userId: number) {\n    return this.likeService.recognizeCommentIsLiked(userId, comments);\n  }\n\n  //find comment by id\n  async findComment(id: number): Promise {\n    const comment = await this.commentRepository.findOne({ where: { id } });\n    return comment;\n  }\n\n  async createComment(comment: CreateCommentDto): Promise {\n    const user: any = this.request.user;\n\n    const post = await this.postService.findPostById(comment.postId);\n    if (post) {\n      await this.commentRepository\n        .createQueryBuilder()\n        .insert()\n        .into(Comments)\n        .values({\n          content: comment.content,\n          senderId: user.id,\n          postId: comment.postId,\n        })\n        .execute();\n\n      const resp: ReqResponse = {\n        status: 201,\n        success: true,\n        message: 'Comment created successfully',\n        error: false,\n      };\n      return resp;\n    } else {\n      throw new NotFoundException('post not found');\n    }\n  }\n\n  async deleteComment(id: number): Promise {\n    const comment = await this.findComment(id);\n    if (comment) {\n      const valid = await this.validateUser(comment.senderId);\n      if (valid) {\n        await this.commentRepository.delete(id);\n\n        const resp: ReqResponse = {\n          status: 200,\n          success: true,\n          message: 'Comment deleted successfully',\n          error: false,\n        };\n        return resp;\n      } else {\n        throw new UnauthorizedException();\n      }\n    } else {\n      throw new HttpException(\n        'Something Went wrong, Select Comment Again',\n        422,\n      );\n    }\n  }\n\n  async updateComment(id: number, data: CommentStatus): Promise {\n    const foundComment = await this.findComment(id);\n\n    if (foundComment && data == 'like') {\n      foundComment.likesCount += 1;\n    } else if (foundComment && data == 'dislike') {\n      foundComment.likesCount -= 1;\n    } else if (foundComment && data == 'switchLike') {\n      foundComment.likesCount += 2;\n    } else if (foundComment && data == 'switchDislike') {\n      foundComment.likesCount -= 2;\n    } else {\n      throw new NotFoundException('Comment not found');\n    }\n\n    await this.commentRepository.save(foundComment);\n    const resp: ReqResponse = {\n      status: 200,\n      success: true,\n      message: 'Comment updated successfully',\n      error: false,\n    };\n    return resp;\n  }\n\n  async validateUser(senderId: number): Promise {\n    const user: any = this.request.user;\n    const userId = user.id;\n\n    console.log(userId, senderId);\n\n    if (userId === senderId) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/create.comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create.comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create.comment.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class CreateCommentDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  content: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty()\n  postId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateCommentMiddleware.html":{"url":"injectables/CreateCommentMiddleware.html","title":"injectable - CreateCommentMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateCommentMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/createComment.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/createComment.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  Logger,\n  NestMiddleware,\n} from '@nestjs/common';\n\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class CreateCommentMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { content, postId } = req.body;\n    Logger.log('*******Create Comment MIDDLEWARE**********', req.method);\n    if (content && postId) {\n      next();\n    } else {\n      throw new HttpException('content & postId are required', 400);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLikeDto.html":{"url":"classes/CreateLikeDto.html","title":"class - CreateLikeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLikeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/dto/create.like.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentId\n                            \n                            \n                                dislike\n                            \n                            \n                                like\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/dto/create.like.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dislike\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/dto/create.like.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        like\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/dto/create.like.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class CreateLikeDto {\n  @IsBoolean()\n  @ApiProperty()\n  @IsOptional()\n  like: boolean;\n\n  @IsBoolean()\n  @ApiProperty()\n  @IsOptional()\n  dislike: boolean;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  commentId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  @ApiProperty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostMiddleware.html":{"url":"injectables/CreatePostMiddleware.html","title":"injectable - CreatePostMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/createPost.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/createPost.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  Logger,\n  NestMiddleware,\n} from '@nestjs/common';\n\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class CreatePostMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { content } = req.body;\n    Logger.log('*******Create Post MIDDLEWARE**********', req.method);\n    if (content) {\n      next();\n    } else {\n      throw new HttpException('content is required', 400);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      id: payload.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Likes.html":{"url":"entities/Likes.html","title":"entity - Likes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Likes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/likes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                commentId\n                            \n                            \n                                hasDisliked\n                            \n                            \n                                hasLiked\n                            \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comments\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, comment => comment.likes, {onDelete: 'CASCADE'})@JoinColumn({name: 'commentId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasDisliked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasLiked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/likes.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  JoinColumn,\n  BaseEntity,\n} from 'typeorm';\nimport { Comments } from './comments.entity';\n\n@Entity('likes')\nexport class Likes extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ default: false })\n  @ApiProperty()\n  hasLiked: boolean;\n\n  @Column({ default: false })\n  @ApiProperty()\n  hasDisliked: boolean;\n\n  @Column({ nullable: true })\n  @ApiProperty()\n  senderId: number;\n\n  @Column({ nullable: true })\n  @ApiProperty()\n  commentId: number;\n\n  @ManyToOne(() => Comments, (comment) => comment.likes, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'commentId' })\n  comment: Comments;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LikesController.html":{"url":"controllers/LikesController.html","title":"controller - LikesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LikesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                likes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(Like: CreateLikeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiCreatedResponse({type: CreateLikeDto, description: 'Like A Comment'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/likes/likes.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Like\n                                    \n                                                CreateLikeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\n\nimport { ApiBearerAuth, ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateLikeDto } from './dto/create.like.dto';\nimport { LikesService } from './likes.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { ReqResponse } from '../schemas/response';\n\n@ApiTags('Likes')\n@UseGuards(JwtAuthGuard)\n@Controller('likes')\nexport class LikesController {\n  constructor(private readonly likeService: LikesService) {}\n\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({\n    type: CreateLikeDto,\n    description: 'Like A Comment',\n  })\n  @Post()\n  async create(@Body() Like: CreateLikeDto): Promise {\n    const savedLike = await this.likeService.likeComment(Like);\n    return savedLike;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LikesModule.html":{"url":"modules/LikesModule.html","title":"module - LikesModule","body":"\n                   \n\n\n\n\n    Modules\n    LikesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_exports\n\n\n\ncluster_LikesModule_providers\n\n\n\n\nLikesService \n\nLikesService \n\n\n\nLikesModule\n\nLikesModule\n\nLikesService  -->\n\nLikesModule->LikesService \n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/likes/likes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LikesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LikesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LikesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { LikesService } from './likes.service';\nimport { LikesController } from './likes.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Likes } from '../entities/likes.entity';\nimport { CommentsModule } from '../comments/comments.module';\n\n@Module({\n  imports: [\n    forwardRef(() => CommentsModule),\n    TypeOrmModule.forFeature([Likes]),\n  ],\n  providers: [LikesService],\n  controllers: [LikesController],\n  exports: [LikesService],\n})\nexport class LikesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LikesService.html":{"url":"injectables/LikesService.html","title":"injectable - LikesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LikesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findLikes\n                            \n                            \n                                    Async\n                                findLikesByCommentId\n                            \n                            \n                                    Async\n                                likeComment\n                            \n                            \n                                    Async\n                                recognizeCommentIsLiked\n                            \n                            \n                                    Async\n                                saveLikeRepo\n                            \n                            \n                                    Async\n                                updateLikeCount\n                            \n                            \n                                    Async\n                                updateLikeRepo\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsService: CommentsService, likeRepository: Repository, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/likes/likes.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsService\n                                                  \n                                                        \n                                                                        CommentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        likeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLikes\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLikes(commentId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLikesByCommentId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLikesByCommentId(commentId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likeComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    likeComment(data: CreateLikeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateLikeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recognizeCommentIsLiked\n                        \n                    \n                \n            \n            \n                \n                    \n                    recognizeCommentIsLiked(senderId: number, comments: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comments\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLikeRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLikeRepo(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateLikeCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLikeCount(commentId: number, likeState: CommentStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    likeState\n                                    \n                                                CommentStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateLikeRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLikeRepo(data)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ReqResponse } from '../schemas/response';\nimport { Repository } from 'typeorm';\nimport { Likes } from '../entities/likes.entity';\nimport { CreateLikeDto } from './dto/create.like.dto';\nimport { Request } from 'express';\nimport { CommentsService } from '../comments/comments.service';\nimport { CommentStatus } from '../comments/dto/update.comment.dto';\nimport { resComment } from '../comments/dto/response.comment.dto';\n\n@Injectable()\nexport class LikesService {\n  constructor(\n    @Inject(forwardRef(() => CommentsService))\n    private commentsService: CommentsService,\n    @InjectRepository(Likes)\n    private readonly likeRepository: Repository,\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  async findLikes(commentId: number, userId: number): Promise {\n    const like = await this.likeRepository.find({\n      where: { commentId, senderId: userId },\n    });\n    return like;\n  }\n\n  async findLikesByCommentId(commentId: number): Promise {\n    const like = await this.likeRepository.find({\n      where: { commentId },\n    });\n    return like;\n  }\n\n  async likeComment(data: CreateLikeDto): Promise {\n    const comment = await this.commentsService.findComment(data.commentId);\n    if (!comment) {\n      throw new NotFoundException('Comment not found');\n    }\n    if (data.like == data.dislike) {\n      throw new BadRequestException('Like and Dislike cannot be same');\n    }\n    const user: any = this.request.user;\n    const likeHistory = await this.findLikes(data.commentId, user.id);\n\n    if (likeHistory.length == 0) {\n      const likeHistoryCollect = [];\n      let hasLiked = false;\n      let hasDisliked = false;\n\n      if (data.like) {\n        hasLiked = true;\n        await this.updateLikeCount(data.commentId, CommentStatus.LIKE);\n      } else if (data.dislike) {\n        await this.updateLikeCount(data.commentId, CommentStatus.DISLIKE);\n        hasDisliked = true;\n      }\n\n      likeHistoryCollect.push({\n        hasLiked: hasLiked,\n        hasDisliked: hasDisliked,\n        senderId: user.id,\n        commentId: data.commentId,\n      });\n      return await this.saveLikeRepo(likeHistoryCollect[0]);\n    } else {\n      if (\n        (likeHistory.length > 0 && likeHistory[0].hasLiked === data.like) ||\n        (likeHistory.length > 0 && likeHistory[0].hasDisliked === data.dislike)\n      ) {\n        return {\n          status: 400,\n          success: false,\n          message: 'You have already voted this comment',\n          error: true,\n        };\n      } else if (\n        likeHistory.length > 0 &&\n        likeHistory[0].hasDisliked &&\n        data.like\n      ) {\n        await this.updateLikeCount(data.commentId, CommentStatus.SWITCH_LIKE);\n\n        likeHistory[0].hasDisliked = false;\n        likeHistory[0].hasLiked = true;\n        return await this.updateLikeRepo(likeHistory[0]);\n      } else if (\n        likeHistory.length > 0 &&\n        likeHistory[0].hasLiked &&\n        data.dislike\n      ) {\n        await this.updateLikeCount(\n          data.commentId,\n          CommentStatus.SWITCH_DISLIKE,\n        );\n\n        likeHistory[0].hasDisliked = true;\n        likeHistory[0].hasLiked = false;\n        return await this.updateLikeRepo(likeHistory[0]);\n      }\n    }\n  }\n\n  async updateLikeRepo(data) {\n    await this.likeRepository\n      .createQueryBuilder()\n      .update(Likes)\n      .set({\n        hasDisliked: data.hasDisliked,\n        hasLiked: data.hasLiked,\n        commentId: data.commentId,\n        senderId: data.senderId,\n      })\n      .where('id = :id', { id: data.id })\n      .execute();\n\n    return {\n      status: 200,\n      success: true,\n      message: 'You have voted this comment successfully',\n      error: false,\n    };\n  }\n\n  async saveLikeRepo(data: any) {\n    await this.likeRepository.save({\n      senderId: data.senderId,\n      commentId: data.commentId,\n      hasDisliked: data.hasDisliked,\n      hasLiked: data.hasLiked,\n    });\n\n    return {\n      status: 200,\n      success: true,\n      message: 'You have voted this comment successfully',\n      error: false,\n    };\n  }\n\n  async updateLikeCount(\n    commentId: number,\n    likeState: CommentStatus,\n  ): Promise {\n    if (likeState === 'like') {\n      await this.commentsService.updateComment(commentId, CommentStatus.LIKE);\n    } else if (likeState === 'dislike') {\n      await this.commentsService.updateComment(\n        commentId,\n        CommentStatus.DISLIKE,\n      );\n    } else if (likeState === 'switchLike') {\n      await this.commentsService.updateComment(\n        commentId,\n        CommentStatus.SWITCH_LIKE,\n      );\n    } else if (likeState === 'switchDislike') {\n      await this.commentsService.updateComment(\n        commentId,\n        CommentStatus.SWITCH_DISLIKE,\n      );\n    }\n  }\n\n  async recognizeCommentIsLiked(senderId: number, comments: Array) {\n    const collect = [];\n\n    for (const comment of comments) {\n      const result = await this.likeRepository.find({\n        where: { senderId, commentId: comment.id, hasLiked: true },\n      });\n      if (result[0]) {\n        collect.push({\n          ...comment,\n          hasLikedByUser: true,\n        });\n      } else {\n        collect.push({\n          ...comment,\n          hasLikedByUser: false,\n        });\n      }\n    }\n    return collect;\n  }\n\n  async validateUser(id: number): Promise {\n    const like = await this.likeRepository.findOne({ where: { id: id } });\n    const user: any = this.request.user;\n\n    if (like.senderId === user.id) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PagingDto.html":{"url":"classes/PagingDto.html","title":"class - PagingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PagingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/paging.comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                pageIndex\n                            \n                            \n                                pageSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/paging.comment.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/paging.comment.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/paging.comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber } from 'class-validator';\n\nexport class PagingDto {\n  @IsNumber()\n  @ApiProperty()\n  pageIndex: number;\n\n  @IsNumber()\n  @ApiProperty()\n  pageSize: number;\n\n  @IsNumber()\n  @ApiProperty()\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(post: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth('access-token')@ApiCreatedResponse({type: CreatePostDto, description: 'Create A Post'})@Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/posts/post.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth('access-token')@ApiCreatedResponse({description: 'Delete A Post'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/post.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(data: PagingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({isArray: true, description: 'Get Posts'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/posts/post.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                PagingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: UpdatePostDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth('access-token')@ApiCreatedResponse({type: UpdatePostDto, description: 'Update A Post'})@ApiNotFoundResponse()@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/post.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  // Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PostService } from './post.service';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { ReqResponse } from '../schemas/response';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PagingDto } from '../comments/dto/paging.comment.dto';\nimport { resPost } from './dto/response.post.dto';\n\n@ApiTags('Posts')\n@Controller('posts')\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @ApiOkResponse({\n    isArray: true,\n    description: 'Get Posts',\n  })\n  @Post()\n  async getPosts(@Body() data: PagingDto): Promise> {\n    return await this.postService.findPosts(data);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({ type: CreatePostDto, description: 'Create A Post' })\n  @Post('/create')\n  async create(@Body() post: CreatePostDto): Promise {\n    const savedPost = await this.postService.createPost(post);\n    return savedPost;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({ type: UpdatePostDto, description: 'Update A Post' })\n  @ApiNotFoundResponse()\n  @Put(':id')\n  async update(\n    @Body() post: UpdatePostDto,\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return await this.postService.updatePost(id, post);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth('access-token')\n  @ApiCreatedResponse({ description: 'Delete A Post' })\n  @Delete(':id')\n  async delete(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.postService.deletePost(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPostService \n\nPostService \n\n\n\nPostModule\n\nPostModule\n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.module.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CreatePostMiddleware } from '../middleware/createPost.middleware';\nimport { Posts } from '../entities/posts.entity';\nimport { PostController } from './post.controller';\nimport { PostService } from './post.service';\nimport { AuditMiddleware } from '../middleware/audit.middleware';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Posts])],\n  controllers: [PostController],\n  providers: [PostService],\n  exports: [PostService],\n})\nexport class PostModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AuditMiddleware).forRoutes({\n      path: '/posts',\n      method: RequestMethod.POST,\n    });\n    consumer\n      .apply(CreatePostMiddleware)\n      .forRoutes({ path: '/posts/create', method: RequestMethod.POST });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                findPostById\n                            \n                            \n                                    Async\n                                findPostByIdAndSenderId\n                            \n                            \n                                    Async\n                                findPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/posts/post.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPostByIdAndSenderId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPostByIdAndSenderId(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPosts(data: PagingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                PagingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, postData: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postData\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(senderId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  NotFoundException,\n  Scope,\n  UnauthorizedException,\n  HttpException,\n} from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ReqResponse } from '../schemas/response';\nimport { Repository } from 'typeorm';\nimport { Posts } from '../entities/posts.entity';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { Request } from 'express';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PagingDto } from '../comments/dto/paging.comment.dto';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PostService {\n  constructor(\n    @InjectRepository(Posts)\n    private readonly postRepository: Repository,\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  async findPosts(data: PagingDto) {\n    const pageIndex = data.pageIndex;\n    const pageSize = data.pageSize;\n    const limit = data.limit;\n\n    const result = this.postRepository\n      .createQueryBuilder('posts')\n      .select(['posts.id', 'posts.senderId', 'posts.content', 'posts.postedAt'])\n      .skip((pageIndex - 1) * pageSize)\n      .take(10)\n      .orderBy('posts.postedAt', 'DESC')\n      .limit(limit)\n      .getMany();\n\n    if (result) {\n      return result;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  async createPost(post: CreatePostDto): Promise {\n    const user: any = this.request.user;\n\n    await this.postRepository\n      .createQueryBuilder()\n      .insert()\n      .into(Posts)\n      .values({\n        content: post.content,\n        senderId: user.id,\n      })\n      .execute();\n\n    const resp: ReqResponse = {\n      status: 201,\n      success: true,\n      message: 'Post created successfully',\n      error: false,\n    };\n    return resp;\n  }\n\n  async updatePost(id: number, postData: UpdatePostDto): Promise {\n    const validPost = await this.findPostByIdAndSenderId(id);\n\n    if (validPost) {\n      await this.postRepository\n        .createQueryBuilder()\n        .update(Posts)\n        .set({\n          content: postData.content,\n          senderId: validPost.senderId,\n        })\n        .where('id = :id', { id })\n        .execute();\n\n      const resp: ReqResponse = {\n        status: 200,\n        success: true,\n        message: 'Post updated successfully',\n        error: false,\n      };\n      return resp;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async deletePost(id: number): Promise {\n    const post = await this.findPostById(id);\n    if (post) {\n      const valid = await this.validateUser(post.senderId);\n      if (valid) {\n        await this.postRepository.delete(id);\n        const resp: ReqResponse = {\n          status: 200,\n          success: true,\n          message: 'Post deleted successfully',\n          error: false,\n        };\n        return resp;\n      } else {\n        throw new UnauthorizedException();\n      }\n    } else {\n      throw new HttpException(\n        'Something Went wrong, Select Comment Again',\n        422,\n      );\n    }\n  }\n\n  async findPostByIdAndSenderId(id: number): Promise {\n    const user: any = this.request.user;\n    const userId = user.id;\n\n    console.log(userId, id);\n\n    return await this.postRepository.findOne({\n      where: { id, senderId: userId },\n    });\n  }\n\n  async findPostById(id: number): Promise {\n    return await this.postRepository.findOne({\n      where: { id },\n    });\n  }\n\n  async validateUser(senderId: number): Promise {\n    const user: any = this.request.user;\n    const userId = user.id;\n\n    if (userId === senderId) {\n      return true;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Posts.html":{"url":"entities/Posts.html","title":"entity - Posts","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Posts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/posts.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                postedAt\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comments[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/posts.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/posts.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/posts.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/posts.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/posts.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  OneToMany,\n  BaseEntity,\n} from 'typeorm';\nimport { Comments } from './comments.entity';\n\n@Entity('posts')\nexport class Posts extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: true })\n  @ApiProperty()\n  content: string;\n\n  @Column({ nullable: true })\n  @ApiProperty()\n  senderId: number;\n\n  @OneToMany(() => Comments, (comment) => comment.post)\n  comments: Comments[];\n\n  @Column({ default: null })\n  @CreateDateColumn()\n  postedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReqResponse.html":{"url":"interfaces/ReqResponse.html","title":"interface - ReqResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReqResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/response.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ReqResponse {\n  status: number;\n  success: boolean;\n  message: string;\n  error: string | boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsString()\n  @ApiProperty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidUserMiddleware.html":{"url":"injectables/ValidUserMiddleware.html","title":"injectable - ValidUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/auth.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  Logger,\n  NestMiddleware,\n} from '@nestjs/common';\n\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class ValidUserMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { id } = req.body;\n    Logger.log('*******MIDDLEWARE**********', req.body);\n    if (id) {\n      next();\n    } else {\n      throw new HttpException('userID is required', 400);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-login.dto.ts\n            \n            class\n            AuthLoginDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/comments/dto/create.comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/paging.comment.dto.ts\n            \n            class\n            PagingDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/dto/response.comment.dto.ts\n            \n            interface\n            resComment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/comments/dto/response.comment.dto.ts\n            \n            interface\n            resFindComment\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entities/comments.entity.ts\n            \n            entity\n            Comments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/likes.entity.ts\n            \n            entity\n            Likes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/posts.entity.ts\n            \n            entity\n            Posts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/benchmark.interceptor.ts\n            \n            injectable\n            BenchmarkInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/likes/dto/create.like.dto.ts\n            \n            class\n            CreateLikeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/likes/likes.controller.ts\n            \n            controller\n            LikesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/likes/likes.service.ts\n            \n            injectable\n            LikesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/audit.middleware.ts\n            \n            injectable\n            AuditMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/auth.middleware.ts\n            \n            injectable\n            ValidUserMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/createComment.middleware.ts\n            \n            injectable\n            CreateCommentMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/createPost.middleware.ts\n            \n            injectable\n            CreatePostMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dto/response.post.dto.ts\n            \n            interface\n            resPost\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/schemas/response.ts\n            \n            interface\n            ReqResponse\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.3\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentStatus   (src/.../update.comment.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/comments/dto/update.comment.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        CommentStatus\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 DISLIKE\n                            \n                        \n                        \n                            \n                                Value : dislike\n                            \n                        \n                        \n                            \n                                 SWITCH_LIKE\n                            \n                        \n                        \n                            \n                                Value : switchLike\n                            \n                        \n                        \n                            \n                                 SWITCH_DISLIKE\n                            \n                        \n                        \n                            \n                                Value : switchDislike\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LikesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_exports\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_exports\n\n\n\ncluster_LikesModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCommentsService \n\nCommentsService \n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nLikesModule\n\nLikesModule\n\nAppModule -->\n\nLikesModule->AppModule\n\n\n\n\n\nLikesService \n\nLikesService \n\nLikesService  -->\n\nLikesModule->LikesService \n\n\n\n\n\nPostModule\n\nPostModule\n\nCommentsModule -->\n\nPostModule->CommentsModule\n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/resComment.html":{"url":"interfaces/resComment.html","title":"interface - resComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  resComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/response.comment.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            likesCount\n                                        \n                                \n                                \n                                        \n                                            postedAt\n                                        \n                                \n                                \n                                        \n                                            senderId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likesCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        likesCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface resComment {\n  id: number;\n  content: string;\n  likesCount: number;\n  senderId: number;\n  postedAt: Date;\n}\n\nexport interface resFindComment {\n  id: number;\n  content: string;\n  likesCount: number;\n  senderId: number;\n  postedAt: Date;\n  hasLikedByUser: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/resFindComment.html":{"url":"interfaces/resFindComment.html","title":"interface - resFindComment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  resFindComment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/response.comment.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            hasLikedByUser\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            likesCount\n                                        \n                                \n                                \n                                        \n                                            postedAt\n                                        \n                                \n                                \n                                        \n                                            senderId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasLikedByUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasLikedByUser:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likesCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        likesCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface resComment {\n  id: number;\n  content: string;\n  likesCount: number;\n  senderId: number;\n  postedAt: Date;\n}\n\nexport interface resFindComment {\n  id: number;\n  content: string;\n  likesCount: number;\n  senderId: number;\n  postedAt: Date;\n  hasLikedByUser: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/resPost.html":{"url":"interfaces/resPost.html","title":"interface - resPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  resPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/response.post.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            postedAt\n                                        \n                                \n                                \n                                        \n                                            senderId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface resPost {\n  id: number;\n  content: string;\n  senderId: number;\n  postedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
